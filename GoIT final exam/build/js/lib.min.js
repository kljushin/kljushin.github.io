!function(t){function e(){}function n(t){function n(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})}function r(e,n){t.fn[e]=function(r){if("string"==typeof r){for(var s=i.call(arguments,1),a=0,u=this.length;u>a;a++){var l=this[a],c=t.data(l,e);if(c)if(t.isFunction(c[r])&&"_"!==r.charAt(0)){var p=c[r].apply(c,s);if(void 0!==p)return p}else o("no such method '"+r+"' for "+e+" instance");else o("cannot call methods on "+e+" prior to initialization; attempted to call '"+r+"'")}return this}return this.each(function(){var i=t.data(this,e);i?(i.option(r),i._init()):(i=new n(this,r),t.data(this,e,i))})}}if(t){var o="undefined"==typeof console?e:function(t){console.error(t)};return t.bridget=function(t,e){n(e),r(t,e)},t.bridget}}var i=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],n):n("object"==typeof exports?require("jquery"):t.jQuery)}(window),function(t){function e(e){var n=t.event;return n.target=n.target||n.srcElement||e,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(t,e,n){t.addEventListener(e,n,!1)}:n.attachEvent&&(i=function(t,n,i){t[n+i]=i.handleEvent?function(){var n=e(t);i.handleEvent.call(i,n)}:function(){var n=e(t);i.call(t,n)},t.attachEvent("on"+n,t[n+i])});var r=function(){};n.removeEventListener?r=function(t,e,n){t.removeEventListener(e,n,!1)}:n.detachEvent&&(r=function(t,e,n){t.detachEvent("on"+e,t[e+n]);try{delete t[e+n]}catch(i){t[e+n]=void 0}});var o={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",o):"object"==typeof exports?module.exports=o:t.eventie=o}(window),function(){"use strict";function t(){}function e(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function n(t){return function(){return this[t].apply(this,arguments)}}var i=t.prototype,r=this,o=r.EventEmitter;i.getListeners=function(t){var e,n,i=this._getEvents();if(t instanceof RegExp){e={};for(n in i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n])}else e=i[t]||(i[t]=[]);return e},i.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},i.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&(e={},e[t]=n),e||n},i.addListener=function(t,n){var i,r=this.getListenersAsObject(t),o="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===e(r[i],n)&&r[i].push(o?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(t){return this.getListeners(t),this},i.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},i.removeListener=function(t,n){var i,r,o=this.getListenersAsObject(t);for(r in o)o.hasOwnProperty(r)&&(i=e(o[r],n),-1!==i&&o[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},i.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},i.manipulateListeners=function(t,e,n){var i,r,o=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)o.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(r=e[i])&&("function"==typeof r?o.call(this,i,r):s.call(this,i,r));return this},i.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if(t instanceof RegExp)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(t,e){var n,i,r,o,s=this.getListenersAsObject(t);for(r in s)if(s.hasOwnProperty(r))for(i=s[r].length;i--;)n=s[r][i],n.once===!0&&this.removeListener(t,n.listener),o=n.listener.apply(this,e||[]),o===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},i.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=o,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}.call(this),function(t){function e(t){if(t){if("string"==typeof i[t])return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e,r=0,o=n.length;o>r;r++)if(e=n[r]+t,"string"==typeof i[e])return e}}var n="Webkit Moz ms Ms O".split(" "),i=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return e}):"object"==typeof exports?module.exports=e:t.getStyleProperty=e}(window),function(t,e){function n(t){var e=parseFloat(t),n=-1===t.indexOf("%")&&!isNaN(e);return n&&e}function i(){}function r(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0,n=a.length;n>e;e++){var i=a[e];t[i]=0}return t}function o(e){function i(){if(!h){h=!0;var i=t.getComputedStyle;if(l=function(){var t=i?function(t){return i(t,null)}:function(t){return t.currentStyle};return function(e){var n=t(e);return n||s("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),n}}(),c=e("boxSizing")){var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style[c]="border-box";var o=document.body||document.documentElement;o.appendChild(r);var a=l(r);p=200===n(a.width),o.removeChild(r)}}}function o(t){if(i(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=l(t);if("none"===e.display)return r();var o={};o.width=t.offsetWidth,o.height=t.offsetHeight;for(var s=o.isBorderBox=!(!c||!e[c]||"border-box"!==e[c]),h=0,f=a.length;f>h;h++){var d=a[h],m=e[d];m=u(t,m);var y=parseFloat(m);o[d]=isNaN(y)?0:y}var g=o.paddingLeft+o.paddingRight,v=o.paddingTop+o.paddingBottom,x=o.marginLeft+o.marginRight,b=o.marginTop+o.marginBottom,_=o.borderLeftWidth+o.borderRightWidth,w=o.borderTopWidth+o.borderBottomWidth,T=s&&p,E=n(e.width);E!==!1&&(o.width=E+(T?0:g+_));var C=n(e.height);return C!==!1&&(o.height=C+(T?0:v+w)),o.innerWidth=o.width-(g+_),o.innerHeight=o.height-(v+w),o.outerWidth=o.width+x,o.outerHeight=o.height+b,o}}function u(e,n){if(t.getComputedStyle||-1===n.indexOf("%"))return n;var i=e.style,r=i.left,o=e.runtimeStyle,s=o&&o.left;return s&&(o.left=e.currentStyle.left),i.left=n,n=i.pixelLeft,i.left=r,s&&(o.left=s),n}var l,c,p,h=!1;return o}var s="undefined"==typeof console?i:function(t){console.error(t)},a=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],o):"object"==typeof exports?module.exports=o(require("desandro-get-style-property")):t.getSize=o(t.getStyleProperty)}(window),function(t){function e(t){"function"==typeof t&&(e.isReady?t():s.push(t))}function n(t){var n="readystatechange"===t.type&&"complete"!==o.readyState;e.isReady||n||i()}function i(){e.isReady=!0;for(var t=0,n=s.length;n>t;t++){var i=s[t];i()}}function r(r){return"complete"===o.readyState?i():(r.bind(o,"DOMContentLoaded",n),r.bind(o,"readystatechange",n),r.bind(t,"load",n)),e}var o=t.document,s=[];e.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):t.docReady=r(t.eventie)}(window),function(t){"use strict";function e(t,e){return t[s](e)}function n(t){if(!t.parentNode){var e=document.createDocumentFragment();e.appendChild(t)}}function i(t,e){n(t);for(var i=t.parentNode.querySelectorAll(e),r=0,o=i.length;o>r;r++)if(i[r]===t)return!0;return!1}function r(t,i){return n(t),e(t,i)}var o,s=function(){if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0,i=e.length;i>n;n++){var r=e[n],o=r+"MatchesSelector";if(t[o])return o}}();if(s){var a=document.createElement("div"),u=e(a,"div");o=u?e:r}else o=i;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return o}):"object"==typeof exports?module.exports=o:window.matchesSelector=o}(Element.prototype),function(t,e){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(n,i){return e(t,n,i)}):"object"==typeof exports?module.exports=e(t,require("doc-ready"),require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.docReady,t.matchesSelector)}(window,function(t,e,n){var i={};i.extend=function(t,e){for(var n in e)t[n]=e[n];return t},i.modulo=function(t,e){return(t%e+e)%e};var r=Object.prototype.toString;i.isArray=function(t){return"[object Array]"==r.call(t)},i.makeArray=function(t){var e=[];if(i.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var n=0,r=t.length;r>n;n++)e.push(t[n]);else e.push(t);return e},i.indexOf=Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},i.removeFrom=function(t,e){var n=i.indexOf(t,e);-1!=n&&t.splice(n,1)},i.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(t){return t instanceof HTMLElement}:function(t){return t&&"object"==typeof t&&1==t.nodeType&&"string"==typeof t.nodeName},i.setText=function(){function t(t,n){e=e||(void 0!==document.documentElement.textContent?"textContent":"innerText"),t[e]=n}var e;return t}(),i.getParent=function(t,e){for(;t!=document.body;)if(t=t.parentNode,n(t,e))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,e){t=i.makeArray(t);for(var r=[],o=0,s=t.length;s>o;o++){var a=t[o];if(i.isElement(a))if(e){n(a,e)&&r.push(a);for(var u=a.querySelectorAll(e),l=0,c=u.length;c>l;l++)r.push(u[l])}else r.push(a)}return r},i.debounceMethod=function(t,e,n){var i=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];t&&clearTimeout(t);var e=arguments,o=this;this[r]=setTimeout(function(){i.apply(o,e),delete o[r]},n||100)}},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var o=t.console;return i.htmlInit=function(n,r){e(function(){for(var e=i.toDashed(r),s=document.querySelectorAll(".js-"+e),a="data-"+e+"-options",u=0,l=s.length;l>u;u++){var c,p=s[u],h=p.getAttribute(a);try{c=h&&JSON.parse(h)}catch(f){o&&o.error("Error parsing "+a+" on "+p.nodeName.toLowerCase()+(p.id?"#"+p.id:"")+": "+f);continue}var d=new n(p,c),m=t.jQuery;m&&m.data(p,r,d)}})},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(n,i,r,o){return e(t,n,i,r,o)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(t.Outlayer={},t.Outlayer.Item=e(t,t.EventEmitter,t.getSize,t.getStyleProperty,t.fizzyUIUtils))}(window,function(t,e,n,i,r){"use strict";function o(t){for(var e in t)return!1;return e=null,!0}function s(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}function a(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}var u=t.getComputedStyle,l=u?function(t){return u(t,null)}:function(t){return t.currentStyle},c=i("transition"),p=i("transform"),h=c&&p,f=!!i("perspective"),d={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[c],m=["transform","transition","transitionDuration","transitionProperty"],y=function(){for(var t={},e=0,n=m.length;n>e;e++){var r=m[e],o=i(r);o&&o!==r&&(t[r]=o)}return t}();r.extend(s.prototype,e.prototype),s.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.getSize=function(){this.size=n(this.element)},s.prototype.css=function(t){var e=this.element.style;for(var n in t){var i=y[n]||n;e[i]=t[n]}},s.prototype.getPosition=function(){var t=l(this.element),e=this.layout.options,n=e.isOriginLeft,i=e.isOriginTop,r=t[n?"left":"right"],o=t[i?"top":"bottom"],s=this.layout.size,a=-1!=r.indexOf("%")?parseFloat(r)/100*s.width:parseInt(r,10),u=-1!=o.indexOf("%")?parseFloat(o)/100*s.height:parseInt(o,10);a=isNaN(a)?0:a,u=isNaN(u)?0:u,a-=n?s.paddingLeft:s.paddingRight,u-=i?s.paddingTop:s.paddingBottom,this.position.x=a,this.position.y=u},s.prototype.layoutPosition=function(){var t=this.layout.size,e=this.layout.options,n={},i=e.isOriginLeft?"paddingLeft":"paddingRight",r=e.isOriginLeft?"left":"right",o=e.isOriginLeft?"right":"left",s=this.position.x+t[i];n[r]=this.getXValue(s),n[o]="";var a=e.isOriginTop?"paddingTop":"paddingBottom",u=e.isOriginTop?"top":"bottom",l=e.isOriginTop?"bottom":"top",c=this.position.y+t[a];n[u]=this.getYValue(c),n[l]="",this.css(n),this.emitEvent("layout",[this])},s.prototype.getXValue=function(t){var e=this.layout.options;return e.percentPosition&&!e.isHorizontal?t/this.layout.size.width*100+"%":t+"px"},s.prototype.getYValue=function(t){var e=this.layout.options;return e.percentPosition&&e.isHorizontal?t/this.layout.size.height*100+"%":t+"px"},s.prototype._transitionTo=function(t,e){this.getPosition();var n=this.position.x,i=this.position.y,r=parseInt(t,10),o=parseInt(e,10),s=r===this.position.x&&o===this.position.y;if(this.setPosition(t,e),s&&!this.isTransitioning)return void this.layoutPosition();var a=t-n,u=e-i,l={};l.transform=this.getTranslate(a,u),this.transition({to:l,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},s.prototype.getTranslate=function(t,e){var n=this.layout.options;return t=n.isOriginLeft?t:-t,e=n.isOriginTop?e:-e,f?"translate3d("+t+"px, "+e+"px, 0)":"translate("+t+"px, "+e+"px)"},s.prototype.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},s.prototype.moveTo=h?s.prototype._transitionTo:s.prototype.goTo,s.prototype.setPosition=function(t,e){this.position.x=parseInt(t,10),this.position.y=parseInt(e,10)},s.prototype._nonTransition=function(t){this.css(t.to),t.isCleaning&&this._removeStyles(t.to);for(var e in t.onTransitionEnd)t.onTransitionEnd[e].call(this)},s.prototype._transition=function(t){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(t);var e=this._transn;for(var n in t.onTransitionEnd)e.onEnd[n]=t.onTransitionEnd[n];for(n in t.to)e.ingProperties[n]=!0,t.isCleaning&&(e.clean[n]=!0);if(t.from){this.css(t.from);var i=this.element.offsetHeight;i=null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0};var g="opacity,"+a(y.transform||"transform");s.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:g,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(d,this,!1))},s.prototype.transition=s.prototype[c?"_transition":"_nonTransition"],s.prototype.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},s.prototype.onotransitionend=function(t){this.ontransitionend(t)};var v={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};s.prototype.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=v[t.propertyName]||t.propertyName;if(delete e.ingProperties[n],o(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd){var i=e.onEnd[n];i.call(this),delete e.onEnd[n]}this.emitEvent("transitionEnd",[this])}},s.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(d,this,!1),this.isTransitioning=!1},s.prototype._removeStyles=function(t){var e={};for(var n in t)e[n]="";this.css(e)};var x={transitionProperty:"",transitionDuration:""};return s.prototype.removeTransitionStyles=function(){this.css(x)},s.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},s.prototype.remove=function(){if(!c||!parseFloat(this.layout.options.transitionDuration))return void this.removeElem();var t=this;this.once("transitionEnd",function(){t.removeElem()}),this.hide()},s.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("visibleStyle");e[n]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},s.prototype.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var n in e)return n},s.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={},n=this.getHideRevealTransitionEndProperty("hiddenStyle");e[n]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},s.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(n,i,r,o,s){return e(t,n,i,r,o,s)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):t.Outlayer=e(t,t.eventie,t.EventEmitter,t.getSize,t.fizzyUIUtils,t.Outlayer.Item)}(window,function(t,e,n,i,r,o){"use strict";function s(t,e){var n=r.getQueryElement(t);if(!n)return void(a&&a.error("Bad element for "+this.constructor.namespace+": "+(n||t)));this.element=n,u&&(this.$element=u(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e);var i=++c;this.element.outlayerGUID=i,p[i]=this,this._create(),this.options.isInitLayout&&this.layout()}var a=t.console,u=t.jQuery,l=function(){},c=0,p={};return s.namespace="outlayer",s.Item=o,s.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},r.extend(s.prototype,n.prototype),s.prototype.option=function(t){r.extend(this.options,t)},s.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},s.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},s.prototype._itemize=function(t){for(var e=this._filterFindItemElements(t),n=this.constructor.Item,i=[],r=0,o=e.length;o>r;r++){var s=e[r],a=new n(s,this);i.push(a)}return i},s.prototype._filterFindItemElements=function(t){return r.filterFindElements(t,this.options.itemSelector)},s.prototype.getItemElements=function(){for(var t=[],e=0,n=this.items.length;n>e;e++)t.push(this.items[e].element);return t},s.prototype.layout=function(){this._resetLayout(),this._manageStamps();var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},s.prototype._init=s.prototype.layout,s.prototype._resetLayout=function(){this.getSize()},s.prototype.getSize=function(){this.size=i(this.element)},s.prototype._getMeasurement=function(t,e){var n,o=this.options[t];o?("string"==typeof o?n=this.element.querySelector(o):r.isElement(o)&&(n=o),this[t]=n?i(n)[e]:o):this[t]=0},s.prototype.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},s.prototype._getItemsForLayout=function(t){for(var e=[],n=0,i=t.length;i>n;n++){var r=t[n];r.isIgnored||e.push(r)}return e},s.prototype._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){for(var n=[],i=0,r=t.length;r>i;i++){var o=t[i],s=this._getItemLayoutPosition(o);s.item=o,s.isInstant=e||o.isLayoutInstant,n.push(s)}this._processLayoutQueue(n)}},s.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},s.prototype._processLayoutQueue=function(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];this._positionItem(i.item,i.x,i.y,i.isInstant)}},s.prototype._positionItem=function(t,e,n,i){i?t.goTo(e,n):t.moveTo(e,n)},s.prototype._postLayout=function(){this.resizeContainer()},s.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},s.prototype._getContainerSize=l,s.prototype._setContainerMeasure=function(t,e){if(void 0!==t){var n=this.size;n.isBorderBox&&(t+=e?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},s.prototype._emitCompleteOnItems=function(t,e){function n(){r.dispatchEvent(t+"Complete",null,[e])}function i(){s++,s===o&&n()}var r=this,o=e.length;if(!e||!o)return void n();for(var s=0,a=0,u=e.length;u>a;a++){var l=e[a];l.once(t,i)}},s.prototype.dispatchEvent=function(t,e,n){var i=e?[e].concat(n):n;if(this.emitEvent(t,i),u)if(this.$element=this.$element||u(this.element),e){var r=u.Event(e);r.type=t,this.$element.trigger(r,n)}else this.$element.trigger(t,n)},s.prototype.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},s.prototype.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},s.prototype.stamp=function(t){if(t=this._find(t)){this.stamps=this.stamps.concat(t);for(var e=0,n=t.length;n>e;e++){var i=t[e];this.ignore(i)}}},s.prototype.unstamp=function(t){if(t=this._find(t))for(var e=0,n=t.length;n>e;e++){var i=t[e];r.removeFrom(this.stamps,i),this.unignore(i)}},s.prototype._find=function(t){return t?("string"==typeof t&&(t=this.element.querySelectorAll(t)),t=r.makeArray(t)):void 0},s.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var t=0,e=this.stamps.length;e>t;t++){var n=this.stamps[t];this._manageStamp(n)}}},s.prototype._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},s.prototype._manageStamp=l,s.prototype._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,r=i(t),o={left:e.left-n.left-r.marginLeft,top:e.top-n.top-r.marginTop,right:n.right-e.right-r.marginRight,bottom:n.bottom-e.bottom-r.marginBottom};return o},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.bindResize=function(){this.isResizeBound||(e.bind(t,"resize",this),this.isResizeBound=!0)},s.prototype.unbindResize=function(){this.isResizeBound&&e.unbind(t,"resize",this),this.isResizeBound=!1},s.prototype.onresize=function(){function t(){e.resize(),delete e.resizeTimeout}this.resizeTimeout&&clearTimeout(this.resizeTimeout);var e=this;this.resizeTimeout=setTimeout(t,100)},s.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},s.prototype.needsResizeLayout=function(){var t=i(this.element),e=this.size&&t;return e&&t.innerWidth!==this.size.innerWidth},s.prototype.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},s.prototype.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},s.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){var n=this.items.slice(0);this.items=e.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(n)}},s.prototype.reveal=function(t){this._emitCompleteOnItems("reveal",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.reveal()}},s.prototype.hide=function(t){this._emitCompleteOnItems("hide",t);for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.hide()}},s.prototype.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},s.prototype.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},s.prototype.getItem=function(t){for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];if(i.element===t)return i}},s.prototype.getItems=function(t){t=r.makeArray(t);for(var e=[],n=0,i=t.length;i>n;n++){var o=t[n],s=this.getItem(o);s&&e.push(s)}return e},s.prototype.remove=function(t){var e=this.getItems(t);if(this._emitCompleteOnItems("remove",e),e&&e.length)for(var n=0,i=e.length;i>n;n++){var o=e[n];o.remove(),r.removeFrom(this.items,o)}},s.prototype.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="";for(var e=0,n=this.items.length;n>e;e++){var i=this.items[e];i.destroy()}this.unbindResize();var r=this.element.outlayerGUID;delete p[r],delete this.element.outlayerGUID,u&&u.removeData(this.element,this.constructor.namespace)},s.data=function(t){t=r.getQueryElement(t);var e=t&&t.outlayerGUID;return e&&p[e]},s.create=function(t,e){function n(){s.apply(this,arguments)}return Object.create?n.prototype=Object.create(s.prototype):r.extend(n.prototype,s.prototype),n.prototype.constructor=n,n.defaults=r.extend({},s.defaults),r.extend(n.defaults,e),n.prototype.settings={},n.namespace=t,n.data=s.data,n.Item=function(){o.apply(this,arguments)},n.Item.prototype=new o,r.htmlInit(n,t),u&&u.bridget&&u.bridget(t,n),n},s.Item=o,s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/item",["outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.Item=e(t.Outlayer))}(window,function(t){"use strict";function e(){t.Item.apply(this,arguments)}e.prototype=new t.Item,e.prototype._create=function(){this.id=this.layout.itemGUID++,t.Item.prototype._create.call(this),this.sortData={}},e.prototype.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var n in t){var i=e[n];this.sortData[n]=i(this.element,this)}}};var n=e.prototype.destroy;return e.prototype.destroy=function(){n.apply(this,arguments),this.css({display:""})},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-mode",["get-size/get-size","outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("get-size"),require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.LayoutMode=e(t.getSize,t.Outlayer))}(window,function(t,e){"use strict";function n(t){this.isotope=t,t&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}return function(){function t(t){return function(){return e.prototype[t].apply(this.isotope,arguments)}}for(var i=["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout"],r=0,o=i.length;o>r;r++){var s=i[r];n.prototype[s]=t(s)}}(),n.prototype.needsVerticalResizeLayout=function(){var e=t(this.isotope.element),n=this.isotope.size&&e;return n&&e.innerHeight!=this.isotope.size.innerHeight},n.prototype._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.prototype.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.prototype.getRowHeight=function(){this.getSegmentSize("row","Height")},n.prototype.getSegmentSize=function(t,e){var n=t+e,i="outer"+e;if(this._getMeasurement(n,i),!this[n]){var r=this.getFirstItemSize();this[n]=r&&r[i]||this.isotope.size["inner"+e]}},n.prototype.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},n.prototype.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.prototype.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(t,e){function i(){n.apply(this,arguments)}return i.prototype=new n,e&&(i.options=e),i.prototype.namespace=t,n.modes[t]=i,i},n}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("masonry/masonry",["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],e):"object"==typeof exports?module.exports=e(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):t.Masonry=e(t.Outlayer,t.getSize,t.fizzyUIUtils)}(window,function(t,e,n){var i=t.create("masonry");return i.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var t=this.cols;for(this.colYs=[];t--;)this.colYs.push(0);this.maxY=0},i.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],n=t&&t.element;this.columnWidth=n&&e(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,r=this.containerWidth+this.gutter,o=r/i,s=i-r%i,a=s&&1>s?"round":"floor";o=Math[a](o),this.cols=Math.max(o,1)},i.prototype.getContainerWidth=function(){var t=this.options.isFitWidth?this.element.parentNode:this.element,n=e(t);this.containerWidth=n&&n.innerWidth},i.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=e&&1>e?"round":"ceil",r=Math[i](t.size.outerWidth/this.columnWidth);r=Math.min(r,this.cols);for(var o=this._getColGroup(r),s=Math.min.apply(Math,o),a=n.indexOf(o,s),u={x:this.columnWidth*a,y:s},l=s+t.size.outerHeight,c=this.cols+1-o.length,p=0;c>p;p++)this.colYs[a+p]=l;return u},i.prototype._getColGroup=function(t){if(2>t)return this.colYs;for(var e=[],n=this.cols+1-t,i=0;n>i;i++){var r=this.colYs.slice(i,i+t);e[i]=Math.max.apply(Math,r)}return e},i.prototype._manageStamp=function(t){var n=e(t),i=this._getElementOffset(t),r=this.options.isOriginLeft?i.left:i.right,o=r+n.outerWidth,s=Math.floor(r/this.columnWidth);s=Math.max(0,s);var a=Math.floor(o/this.columnWidth);a-=o%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var u=(this.options.isOriginTop?i.top:i.bottom)+n.outerHeight,l=s;a>=l;l++)this.colYs[l]=Math.max(u,this.colYs[l])},i.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this.options.isFitWidth&&(t.width=this._getContainerFitWidth()),t},i.prototype._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.prototype.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!==this.containerWidth},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/masonry",["../layout-mode","masonry/masonry"],e):"object"==typeof exports?module.exports=e(require("../layout-mode"),require("masonry-layout")):e(t.Isotope.LayoutMode,t.Masonry)}(window,function(t,e){"use strict";function n(t,e){for(var n in e)t[n]=e[n];return t}var i=t.create("masonry"),r=i.prototype._getElementOffset,o=i.prototype.layout,s=i.prototype._getMeasurement;
n(i.prototype,e.prototype),i.prototype._getElementOffset=r,i.prototype.layout=o,i.prototype._getMeasurement=s;var a=i.prototype.measureColumns;i.prototype.measureColumns=function(){this.items=this.isotope.filteredItems,a.call(this)};var u=i.prototype._manageStamp;return i.prototype._manageStamp=function(){this.options.isOriginLeft=this.isotope.options.isOriginLeft,this.options.isOriginTop=this.isotope.options.isOriginTop,u.apply(this,arguments)},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/fit-rows",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("fitRows");return e.prototype._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,n=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>n&&(this.x=0,this.y=this.maxY);var i={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,i},e.prototype._getContainerSize=function(){return{height:this.maxY}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/vertical",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0});return e.prototype._resetLayout=function(){this.y=0},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,n=this.y;return this.y+=t.size.outerHeight,{x:e,y:n}},e.prototype._getContainerSize=function(){return{height:this.y}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","matches-selector/matches-selector","fizzy-ui-utils/utils","isotope/js/item","isotope/js/layout-mode","isotope/js/layout-modes/masonry","isotope/js/layout-modes/fit-rows","isotope/js/layout-modes/vertical"],function(n,i,r,o,s,a){return e(t,n,i,r,o,s,a)}):"object"==typeof exports?module.exports=e(t,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("./item"),require("./layout-mode"),require("./layout-modes/masonry"),require("./layout-modes/fit-rows"),require("./layout-modes/vertical")):t.Isotope=e(t,t.Outlayer,t.getSize,t.matchesSelector,t.fizzyUIUtils,t.Isotope.Item,t.Isotope.LayoutMode)}(window,function(t,e,n,i,r,o,s){function a(t,e){return function(n,i){for(var r=0,o=t.length;o>r;r++){var s=t[r],a=n.sortData[s],u=i.sortData[s];if(a>u||u>a){var l=void 0!==e[s]?e[s]:e,c=l?1:-1;return(a>u?1:-1)*c}}return 0}}var u=t.jQuery,l=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},c=document.documentElement,p=c.textContent?function(t){return t.textContent}:function(t){return t.innerText},h=e.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});h.Item=o,h.LayoutMode=s,h.prototype._create=function(){this.itemGUID=0,this._sorters={},this._getSorters(),e.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"];for(var t in s.modes)this._initLayoutMode(t)},h.prototype.reloadItems=function(){this.itemGUID=0,e.prototype.reloadItems.call(this)},h.prototype._itemize=function(){for(var t=e.prototype._itemize.apply(this,arguments),n=0,i=t.length;i>n;n++){var r=t[n];r.id=this.itemGUID++}return this._updateItemsSortData(t),t},h.prototype._initLayoutMode=function(t){var e=s.modes[t],n=this.options[t]||{};this.options[t]=e.options?r.extend(e.options,n):n,this.modes[t]=new e(this)},h.prototype.layout=function(){return!this._isLayoutInited&&this.options.isInitLayout?void this.arrange():void this._layout()},h.prototype._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},h.prototype.arrange=function(t){function e(){i.reveal(n.needReveal),i.hide(n.needHide)}this.option(t),this._getIsInstant();var n=this._filter(this.items);this.filteredItems=n.matches;var i=this;this._bindArrangeComplete(),this._isInstant?this._noTransition(e):e(),this._sort(),this._layout()},h.prototype._init=h.prototype.arrange,h.prototype._getIsInstant=function(){var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;return this._isInstant=t,t},h.prototype._bindArrangeComplete=function(){function t(){e&&n&&i&&r.dispatchEvent("arrangeComplete",null,[r.filteredItems])}var e,n,i,r=this;this.once("layoutComplete",function(){e=!0,t()}),this.once("hideComplete",function(){n=!0,t()}),this.once("revealComplete",function(){i=!0,t()})},h.prototype._filter=function(t){var e=this.options.filter;e=e||"*";for(var n=[],i=[],r=[],o=this._getFilterTest(e),s=0,a=t.length;a>s;s++){var u=t[s];if(!u.isIgnored){var l=o(u);l&&n.push(u),l&&u.isHidden?i.push(u):l||u.isHidden||r.push(u)}}return{matches:n,needReveal:i,needHide:r}},h.prototype._getFilterTest=function(t){return u&&this.options.isJQueryFiltering?function(e){return u(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return i(e.element,t)}},h.prototype.updateSortData=function(t){var e;t?(t=r.makeArray(t),e=this.getItems(t)):e=this.items,this._getSorters(),this._updateItemsSortData(e)},h.prototype._getSorters=function(){var t=this.options.getSortData;for(var e in t){var n=t[e];this._sorters[e]=f(n)}},h.prototype._updateItemsSortData=function(t){for(var e=t&&t.length,n=0;e&&e>n;n++){var i=t[n];i.updateSortData()}};var f=function(){function t(t){if("string"!=typeof t)return t;var n=l(t).split(" "),i=n[0],r=i.match(/^\[(.+)\]$/),o=r&&r[1],s=e(o,i),a=h.sortDataParsers[n[1]];return t=a?function(t){return t&&a(s(t))}:function(t){return t&&s(t)}}function e(t,e){var n;return n=t?function(e){return e.getAttribute(t)}:function(t){var n=t.querySelector(e);return n&&p(n)}}return t}();h.sortDataParsers={parseInt:function(t){return parseInt(t,10)},parseFloat:function(t){return parseFloat(t)}},h.prototype._sort=function(){var t=this.options.sortBy;if(t){var e=[].concat.apply(t,this.sortHistory),n=a(e,this.options.sortAscending);this.filteredItems.sort(n),t!=this.sortHistory[0]&&this.sortHistory.unshift(t)}},h.prototype._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},h.prototype._resetLayout=function(){e.prototype._resetLayout.call(this),this._mode()._resetLayout()},h.prototype._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},h.prototype._manageStamp=function(t){this._mode()._manageStamp(t)},h.prototype._getContainerSize=function(){return this._mode()._getContainerSize()},h.prototype.needsResizeLayout=function(){return this._mode().needsResizeLayout()},h.prototype.appended=function(t){var e=this.addItems(t);if(e.length){var n=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(n)}},h.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var n=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=n.concat(this.filteredItems),this.items=e.concat(this.items)}},h.prototype._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},h.prototype.insert=function(t){var e=this.addItems(t);if(e.length){var n,i,r=e.length;for(n=0;r>n;n++)i=e[n],this.element.appendChild(i.element);var o=this._filter(e).matches;for(n=0;r>n;n++)e[n].isLayoutInstant=!0;for(this.arrange(),n=0;r>n;n++)delete e[n].isLayoutInstant;this.reveal(o)}};var d=h.prototype.remove;return h.prototype.remove=function(t){t=r.makeArray(t);var e=this.getItems(t);d.call(this,t);var n=e&&e.length;if(n)for(var i=0;n>i;i++){var o=e[i];r.removeFrom(this.filteredItems,o)}},h.prototype.shuffle=function(){for(var t=0,e=this.items.length;e>t;t++){var n=this.items[t];n.sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},h.prototype._noTransition=function(t){var e=this.options.transitionDuration;this.options.transitionDuration=0;var n=t.call(this);return this.options.transitionDuration=e,n},h.prototype.getFilteredItemElements=function(){for(var t=[],e=0,n=this.filteredItems.length;n>e;e++)t.push(this.filteredItems[e].element);return t},h}),function(t,e){function n(t){var e=t.length,n=ut.type(t);return ut.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||"function"!==n&&(0===e||"number"==typeof e&&e>0&&e-1 in t)}function i(t){var e=Tt[t]={};return ut.each(t.match(ct)||[],function(t,n){e[n]=!0}),e}function r(t,n,i,r){if(ut.acceptData(t)){var o,s,a=ut.expando,u="string"==typeof n,l=t.nodeType,c=l?ut.cache:t,p=l?t[a]:t[a]&&a;if(p&&c[p]&&(r||c[p].data)||!u||i!==e)return p||(l?t[a]=p=Z.pop()||ut.guid++:p=a),c[p]||(c[p]={},l||(c[p].toJSON=ut.noop)),"object"!=typeof n&&"function"!=typeof n||(r?c[p]=ut.extend(c[p],n):c[p].data=ut.extend(c[p].data,n)),o=c[p],r||(o.data||(o.data={}),o=o.data),i!==e&&(o[ut.camelCase(n)]=i),u?(s=o[n],null==s&&(s=o[ut.camelCase(n)])):s=o,s}}function o(t,e,n){if(ut.acceptData(t)){var i,r,o,s=t.nodeType,u=s?ut.cache:t,l=s?t[ut.expando]:ut.expando;if(u[l]){if(e&&(o=n?u[l]:u[l].data)){ut.isArray(e)?e=e.concat(ut.map(e,ut.camelCase)):e in o?e=[e]:(e=ut.camelCase(e),e=e in o?[e]:e.split(" "));for(i=0,r=e.length;r>i;i++)delete o[e[i]];if(!(n?a:ut.isEmptyObject)(o))return}(n||(delete u[l].data,a(u[l])))&&(s?ut.cleanData([t],!0):ut.support.deleteExpando||u!=u.window?delete u[l]:u[l]=null)}}}function s(t,n,i){if(i===e&&1===t.nodeType){var r="data-"+n.replace(Ct,"-$1").toLowerCase();if(i=t.getAttribute(r),"string"==typeof i){try{i="true"===i?!0:"false"===i?!1:"null"===i?null:+i+""===i?+i:Et.test(i)?ut.parseJSON(i):i}catch(o){}ut.data(t,n,i)}else i=e}return i}function a(t){var e;for(e in t)if(("data"!==e||!ut.isEmptyObject(t[e]))&&"toJSON"!==e)return!1;return!0}function u(){return!0}function l(){return!1}function c(t,e){do t=t[e];while(t&&1!==t.nodeType);return t}function p(t,e,n){if(e=e||0,ut.isFunction(e))return ut.grep(t,function(t,i){var r=!!e.call(t,i,t);return r===n});if(e.nodeType)return ut.grep(t,function(t){return t===e===n});if("string"==typeof e){var i=ut.grep(t,function(t){return 1===t.nodeType});if(Bt.test(e))return ut.filter(e,i,!n);e=ut.filter(e,i)}return ut.grep(t,function(t){return ut.inArray(t,e)>=0===n})}function h(t){var e=Ut.split("|"),n=t.createDocumentFragment();if(n.createElement)for(;e.length;)n.createElement(e.pop());return n}function f(t,e){return t.getElementsByTagName(e)[0]||t.appendChild(t.ownerDocument.createElement(e))}function d(t){var e=t.getAttributeNode("type");return t.type=(e&&e.specified)+"/"+t.type,t}function m(t){var e=re.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function y(t,e){for(var n,i=0;null!=(n=t[i]);i++)ut._data(n,"globalEval",!e||ut._data(e[i],"globalEval"))}function g(t,e){if(1===e.nodeType&&ut.hasData(t)){var n,i,r,o=ut._data(t),s=ut._data(e,o),a=o.events;if(a){delete s.handle,s.events={};for(n in a)for(i=0,r=a[n].length;r>i;i++)ut.event.add(e,n,a[n][i])}s.data&&(s.data=ut.extend({},s.data))}}function v(t,e){var n,i,r;if(1===e.nodeType){if(n=e.nodeName.toLowerCase(),!ut.support.noCloneEvent&&e[ut.expando]){r=ut._data(e);for(i in r.events)ut.removeEvent(e,i,r.handle);e.removeAttribute(ut.expando)}"script"===n&&e.text!==t.text?(d(e).text=t.text,m(e)):"object"===n?(e.parentNode&&(e.outerHTML=t.outerHTML),ut.support.html5Clone&&t.innerHTML&&!ut.trim(e.innerHTML)&&(e.innerHTML=t.innerHTML)):"input"===n&&ee.test(t.type)?(e.defaultChecked=e.checked=t.checked,e.value!==t.value&&(e.value=t.value)):"option"===n?e.defaultSelected=e.selected=t.defaultSelected:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}}function x(t,n){var i,r,o=0,s=typeof t.getElementsByTagName!==Y?t.getElementsByTagName(n||"*"):typeof t.querySelectorAll!==Y?t.querySelectorAll(n||"*"):e;if(!s)for(s=[],i=t.childNodes||t;null!=(r=i[o]);o++)!n||ut.nodeName(r,n)?s.push(r):ut.merge(s,x(r,n));return n===e||n&&ut.nodeName(t,n)?ut.merge([t],s):s}function b(t){ee.test(t.type)&&(t.defaultChecked=t.checked)}function _(t,e){if(e in t)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),i=e,r=Ee.length;r--;)if(e=Ee[r]+n,e in t)return e;return i}function w(t,e){return t=e||t,"none"===ut.css(t,"display")||!ut.contains(t.ownerDocument,t)}function T(t,e){for(var n,i,r,o=[],s=0,a=t.length;a>s;s++)i=t[s],i.style&&(o[s]=ut._data(i,"olddisplay"),n=i.style.display,e?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&w(i)&&(o[s]=ut._data(i,"olddisplay",j(i.nodeName)))):o[s]||(r=w(i),(n&&"none"!==n||!r)&&ut._data(i,"olddisplay",r?n:ut.css(i,"display"))));for(s=0;a>s;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[s]||"":"none"));return t}function E(t,e,n){var i=ge.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function C(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=ut.css(t,n+Te[o],!0,r)),i?("content"===n&&(s-=ut.css(t,"padding"+Te[o],!0,r)),"margin"!==n&&(s-=ut.css(t,"border"+Te[o]+"Width",!0,r))):(s+=ut.css(t,"padding"+Te[o],!0,r),"padding"!==n&&(s+=ut.css(t,"border"+Te[o]+"Width",!0,r)));return s}function S(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=ce(t),s=ut.support.boxSizing&&"border-box"===ut.css(t,"boxSizing",!1,o);if(0>=r||null==r){if(r=pe(t,e,o),(0>r||null==r)&&(r=t.style[e]),ve.test(r))return r;i=s&&(ut.support.boxSizingReliable||r===t.style[e]),r=parseFloat(r)||0}return r+C(t,e,n||(s?"border":"content"),i,o)+"px"}function j(t){var e=V,n=be[t];return n||(n=N(t,e),"none"!==n&&n||(le=(le||ut("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(e.documentElement),e=(le[0].contentWindow||le[0].contentDocument).document,e.write("<!doctype html><html><body>"),e.close(),n=N(t,e),le.detach()),be[t]=n),n}function N(t,e){var n=ut(e.createElement(t)).appendTo(e.body),i=ut.css(n[0],"display");return n.remove(),i}function L(t,e,n,i){var r;if(ut.isArray(e))ut.each(e,function(e,r){n||Se.test(t)?i(t,r):L(t+"["+("object"==typeof r?e:"")+"]",r,n,i)});else if(n||"object"!==ut.type(e))i(t,e);else for(r in e)L(t+"["+r+"]",e[r],n,i)}function k(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(ct)||[];if(ut.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function I(t,e,n,i){function r(a){var u;return o[a]=!0,ut.each(t[a]||[],function(t,a){var l=a(e,n,i);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(e.dataTypes.unshift(l),r(l),!1)}),u}var o={},s=t===Be;return r(e.dataTypes[0])||!o["*"]&&r("*")}function A(t,n){var i,r,o=ut.ajaxSettings.flatOptions||{};for(r in n)n[r]!==e&&((o[r]?t:i||(i={}))[r]=n[r]);return i&&ut.extend(!0,t,i),t}function z(t,n,i){var r,o,s,a,u=t.contents,l=t.dataTypes,c=t.responseFields;for(a in c)a in i&&(n[c[a]]=i[a]);for(;"*"===l[0];)l.shift(),o===e&&(o=t.mimeType||n.getResponseHeader("Content-Type"));if(o)for(a in u)if(u[a]&&u[a].test(o)){l.unshift(a);break}if(l[0]in i)s=l[0];else{for(a in i){if(!l[0]||t.converters[a+" "+l[0]]){s=a;break}r||(r=a)}s=s||r}return s?(s!==l[0]&&l.unshift(s),i[s]):void 0}function D(t,e){var n,i,r,o,s={},a=0,u=t.dataTypes.slice(),l=u[0];if(t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u[1])for(r in t.converters)s[r.toLowerCase()]=t.converters[r];for(;i=u[++a];)if("*"!==i){if("*"!==l&&l!==i){if(r=s[l+" "+i]||s["* "+i],!r)for(n in s)if(o=n.split(" "),o[1]===i&&(r=s[l+" "+o[0]]||s["* "+o[0]])){r===!0?r=s[n]:s[n]!==!0&&(i=o[0],u.splice(a--,0,i));break}if(r!==!0)if(r&&t["throws"])e=r(e);else try{e=r(e)}catch(c){return{state:"parsererror",error:r?c:"No conversion from "+l+" to "+i}}}l=i}return{state:"success",data:e}}function H(){try{return new t.XMLHttpRequest}catch(e){}}function M(){try{return new t.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function q(){return setTimeout(function(){Ke=e}),Ke=ut.now()}function O(t,e){ut.each(e,function(e,n){for(var i=(on[e]||[]).concat(on["*"]),r=0,o=i.length;o>r;r++)if(i[r].call(t,e,n))return})}function R(t,e,n){var i,r,o=0,s=rn.length,a=ut.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var e=Ke||q(),n=Math.max(0,l.startTime+l.duration-e),i=n/l.duration||0,o=1-i,s=0,u=l.tweens.length;u>s;s++)l.tweens[s].run(o);return a.notifyWith(t,[l,o,n]),1>o&&u?n:(a.resolveWith(t,[l]),!1)},l=a.promise({elem:t,props:ut.extend({},e),opts:ut.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Ke||q(),duration:n.duration,tweens:[],createTween:function(e,n){var i=ut.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(i),i},stop:function(e){var n=0,i=e?l.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)l.tweens[n].run(1);return e?a.resolveWith(t,[l,e]):a.rejectWith(t,[l,e]),this}}),c=l.props;for(F(c,l.opts.specialEasing);s>o;o++)if(i=rn[o].call(l,t,c,l.opts))return i;return O(l,c),ut.isFunction(l.opts.start)&&l.opts.start.call(t,l),ut.fx.timer(ut.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function F(t,e){var n,i,r,o,s;for(r in t)if(i=ut.camelCase(r),o=e[i],n=t[r],ut.isArray(n)&&(o=n[1],n=t[r]=n[0]),r!==i&&(t[i]=n,delete t[r]),s=ut.cssHooks[i],s&&"expand"in s){n=s.expand(n),delete t[i];for(r in n)r in t||(t[r]=n[r],e[r]=o)}else e[i]=o}function W(t,e,n){var i,r,o,s,a,u,l,c,p,h=this,f=t.style,d={},m=[],y=t.nodeType&&w(t);n.queue||(c=ut._queueHooks(t,"fx"),null==c.unqueued&&(c.unqueued=0,p=c.empty.fire,c.empty.fire=function(){c.unqueued||p()}),c.unqueued++,h.always(function(){h.always(function(){c.unqueued--,ut.queue(t,"fx").length||c.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],"inline"===ut.css(t,"display")&&"none"===ut.css(t,"float")&&(ut.support.inlineBlockNeedsLayout&&"inline"!==j(t.nodeName)?f.zoom=1:f.display="inline-block")),n.overflow&&(f.overflow="hidden",ut.support.shrinkWrapBlocks||h.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(r in e)if(s=e[r],tn.exec(s)){if(delete e[r],u=u||"toggle"===s,s===(y?"hide":"show"))continue;m.push(r)}if(o=m.length){a=ut._data(t,"fxshow")||ut._data(t,"fxshow",{}),"hidden"in a&&(y=a.hidden),u&&(a.hidden=!y),y?ut(t).show():h.done(function(){ut(t).hide()}),h.done(function(){var e;ut._removeData(t,"fxshow");for(e in d)ut.style(t,e,d[e])});for(r=0;o>r;r++)i=m[r],l=h.createTween(i,y?a[i]:0),d[i]=a[i]||ut.style(t,i),i in a||(a[i]=l.start,y&&(l.end=l.start,l.start="width"===i||"height"===i?1:0))}}function P(t,e,n,i,r){return new P.prototype.init(t,e,n,i,r)}function B(t,e){var n,i={height:t},r=0;for(e=e?1:0;4>r;r+=2-e)n=Te[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function $(t){return ut.isWindow(t)?t:9===t.nodeType?t.defaultView||t.parentWindow:!1}var X,U,Y=typeof e,V=t.document,Q=t.location,G=t.jQuery,J=t.$,K={},Z=[],tt="1.9.1",et=Z.concat,nt=Z.push,it=Z.slice,rt=Z.indexOf,ot=K.toString,st=K.hasOwnProperty,at=tt.trim,ut=function(t,e){return new ut.fn.init(t,e,U)},lt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ct=/\S+/g,pt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ht=/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,ft=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,dt=/^[\],:{}\s]*$/,mt=/(?:^|:|,)(?:\s*\[)+/g,yt=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,gt=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,vt=/^-ms-/,xt=/-([\da-z])/gi,bt=function(t,e){return e.toUpperCase()},_t=function(t){(V.addEventListener||"load"===t.type||"complete"===V.readyState)&&(wt(),ut.ready())},wt=function(){V.addEventListener?(V.removeEventListener("DOMContentLoaded",_t,!1),t.removeEventListener("load",_t,!1)):(V.detachEvent("onreadystatechange",_t),t.detachEvent("onload",_t))};ut.fn=ut.prototype={jquery:tt,constructor:ut,init:function(t,n,i){var r,o;if(!t)return this;if("string"==typeof t){if(r="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:ht.exec(t),!r||!r[1]&&n)return!n||n.jquery?(n||i).find(t):this.constructor(n).find(t);if(r[1]){if(n=n instanceof ut?n[0]:n,ut.merge(this,ut.parseHTML(r[1],n&&n.nodeType?n.ownerDocument||n:V,!0)),ft.test(r[1])&&ut.isPlainObject(n))for(r in n)ut.isFunction(this[r])?this[r](n[r]):this.attr(r,n[r]);return this}if(o=V.getElementById(r[2]),o&&o.parentNode){if(o.id!==r[2])return i.find(t);this.length=1,this[0]=o}return this.context=V,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):ut.isFunction(t)?i.ready(t):(t.selector!==e&&(this.selector=t.selector,this.context=t.context),ut.makeArray(t,this))},selector:"",length:0,size:function(){return this.length},toArray:function(){return it.call(this)},get:function(t){return null==t?this.toArray():0>t?this[this.length+t]:this[t]},pushStack:function(t){var e=ut.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return ut.each(this,t,e)},ready:function(t){return ut.ready.promise().done(t),this},slice:function(){return this.pushStack(it.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},map:function(t){return this.pushStack(ut.map(this,function(e,n){return t.call(e,n,e)}))},end:function(){return this.prevObject||this.constructor(null)},push:nt,sort:[].sort,splice:[].splice},ut.fn.init.prototype=ut.fn,ut.extend=ut.fn.extend=function(){var t,n,i,r,o,s,a=arguments[0]||{},u=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[1]||{},u=2),"object"==typeof a||ut.isFunction(a)||(a={}),l===u&&(a=this,--u);l>u;u++)if(null!=(o=arguments[u]))for(r in o)t=a[r],i=o[r],a!==i&&(c&&i&&(ut.isPlainObject(i)||(n=ut.isArray(i)))?(n?(n=!1,s=t&&ut.isArray(t)?t:[]):s=t&&ut.isPlainObject(t)?t:{},a[r]=ut.extend(c,s,i)):i!==e&&(a[r]=i));return a},ut.extend({noConflict:function(e){return t.$===ut&&(t.$=J),e&&t.jQuery===ut&&(t.jQuery=G),ut},isReady:!1,readyWait:1,holdReady:function(t){t?ut.readyWait++:ut.ready(!0)},ready:function(t){if(t===!0?!--ut.readyWait:!ut.isReady){if(!V.body)return setTimeout(ut.ready);ut.isReady=!0,t!==!0&&--ut.readyWait>0||(X.resolveWith(V,[ut]),ut.fn.trigger&&ut(V).trigger("ready").off("ready"))}},isFunction:function(t){return"function"===ut.type(t)},isArray:Array.isArray||function(t){return"array"===ut.type(t)},isWindow:function(t){return null!=t&&t==t.window},isNumeric:function(t){return!isNaN(parseFloat(t))&&isFinite(t)},type:function(t){return null==t?String(t):"object"==typeof t||"function"==typeof t?K[ot.call(t)]||"object":typeof t},isPlainObject:function(t){if(!t||"object"!==ut.type(t)||t.nodeType||ut.isWindow(t))return!1;try{if(t.constructor&&!st.call(t,"constructor")&&!st.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}var i;for(i in t);return i===e||st.call(t,i)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},error:function(t){throw new Error(t)},parseHTML:function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||V;var i=ft.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=ut.buildFragment([t],e,r),r&&ut(r).remove(),ut.merge([],i.childNodes))},parseJSON:function(e){return t.JSON&&t.JSON.parse?t.JSON.parse(e):null===e?e:"string"==typeof e&&(e=ut.trim(e),e&&dt.test(e.replace(yt,"@").replace(gt,"]").replace(mt,"")))?new Function("return "+e)():void ut.error("Invalid JSON: "+e)},parseXML:function(n){var i,r;if(!n||"string"!=typeof n)return null;try{t.DOMParser?(r=new DOMParser,i=r.parseFromString(n,"text/xml")):(i=new ActiveXObject("Microsoft.XMLDOM"),i.async="false",i.loadXML(n))}catch(o){i=e}return i&&i.documentElement&&!i.getElementsByTagName("parsererror").length||ut.error("Invalid XML: "+n),i},noop:function(){},globalEval:function(e){e&&ut.trim(e)&&(t.execScript||function(e){t.eval.call(t,e)})(e)},camelCase:function(t){return t.replace(vt,"ms-").replace(xt,bt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var r,o=0,s=t.length,a=n(t);if(i){if(a)for(;s>o&&(r=e.apply(t[o],i),r!==!1);o++);else for(o in t)if(r=e.apply(t[o],i),r===!1)break}else if(a)for(;s>o&&(r=e.call(t[o],o,t[o]),r!==!1);o++);else for(o in t)if(r=e.call(t[o],o,t[o]),r===!1)break;return t},trim:at&&!at.call("\ufeff ")?function(t){return null==t?"":at.call(t)}:function(t){return null==t?"":(t+"").replace(pt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?ut.merge(i,"string"==typeof t?[t]:t):nt.call(i,t)),i},inArray:function(t,e,n){var i;if(e){if(rt)return rt.call(e,t,n);for(i=e.length,n=n?0>n?Math.max(0,i+n):n:0;i>n;n++)if(n in e&&e[n]===t)return n}return-1},merge:function(t,n){var i=n.length,r=t.length,o=0;if("number"==typeof i)for(;i>o;o++)t[r++]=n[o];else for(;n[o]!==e;)t[r++]=n[o++];return t.length=r,t},grep:function(t,e,n){var i,r=[],o=0,s=t.length;for(n=!!n;s>o;o++)i=!!e(t[o],o),n!==i&&r.push(t[o]);return r},map:function(t,e,i){var r,o=0,s=t.length,a=n(t),u=[];if(a)for(;s>o;o++)r=e(t[o],o,i),null!=r&&(u[u.length]=r);else for(o in t)r=e(t[o],o,i),null!=r&&(u[u.length]=r);return et.apply([],u)},guid:1,proxy:function(t,n){var i,r,o;return"string"==typeof n&&(o=t[n],n=t,t=o),ut.isFunction(t)?(i=it.call(arguments,2),r=function(){return t.apply(n||this,i.concat(it.call(arguments)))},r.guid=t.guid=t.guid||ut.guid++,r):e},access:function(t,n,i,r,o,s,a){var u=0,l=t.length,c=null==i;if("object"===ut.type(i)){o=!0;for(u in i)ut.access(t,n,u,i[u],!0,s,a)}else if(r!==e&&(o=!0,ut.isFunction(r)||(a=!0),c&&(a?(n.call(t,r),n=null):(c=n,n=function(t,e,n){return c.call(ut(t),n)})),n))for(;l>u;u++)n(t[u],i,a?r:r.call(t[u],u,n(t[u],i)));return o?t:c?n.call(t):l?n(t[0],i):s},now:function(){return(new Date).getTime()}}),ut.ready.promise=function(e){if(!X)if(X=ut.Deferred(),"complete"===V.readyState)setTimeout(ut.ready);else if(V.addEventListener)V.addEventListener("DOMContentLoaded",_t,!1),t.addEventListener("load",_t,!1);else{V.attachEvent("onreadystatechange",_t),t.attachEvent("onload",_t);var n=!1;try{n=null==t.frameElement&&V.documentElement}catch(i){}n&&n.doScroll&&!function r(){if(!ut.isReady){try{n.doScroll("left")}catch(t){return setTimeout(r,50)}wt(),ut.ready()}}()}return X.promise(e)},ut.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){K["[object "+e+"]"]=e.toLowerCase()}),U=ut(V);var Tt={};ut.Callbacks=function(t){t="string"==typeof t?Tt[t]||i(t):ut.extend({},t);var n,r,o,s,a,u,l=[],c=!t.once&&[],p=function(e){for(r=t.memory&&e,o=!0,a=u||0,u=0,s=l.length,n=!0;l&&s>a;a++)if(l[a].apply(e[0],e[1])===!1&&t.stopOnFalse){r=!1;break}n=!1,l&&(c?c.length&&p(c.shift()):r?l=[]:h.disable())},h={add:function(){if(l){var e=l.length;!function i(e){ut.each(e,function(e,n){var r=ut.type(n);"function"===r?t.unique&&h.has(n)||l.push(n):n&&n.length&&"string"!==r&&i(n)})}(arguments),n?s=l.length:r&&(u=e,p(r))}return this},remove:function(){return l&&ut.each(arguments,function(t,e){for(var i;(i=ut.inArray(e,l,i))>-1;)l.splice(i,1),n&&(s>=i&&s--,a>=i&&a--)}),this},has:function(t){return t?ut.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],this},disable:function(){return l=c=r=e,this},disabled:function(){return!l},lock:function(){return c=e,r||h.disable(),this},locked:function(){return!c},fireWith:function(t,e){return e=e||[],e=[t,e.slice?e.slice():e],!l||o&&!c||(n?c.push(e):p(e)),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!o}};return h},ut.extend({Deferred:function(t){var e=[["resolve","done",ut.Callbacks("once memory"),"resolved"],["reject","fail",ut.Callbacks("once memory"),"rejected"],["notify","progress",ut.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return ut.Deferred(function(n){ut.each(e,function(e,o){var s=o[0],a=ut.isFunction(t[e])&&t[e];r[o[1]](function(){var t=a&&a.apply(this,arguments);t&&ut.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+"With"](this===i?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?ut.extend(t,i):i}},r={};return i.pipe=i.then,ut.each(e,function(t,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=it.call(arguments),s=o.length,a=1!==s||t&&ut.isFunction(t.promise)?s:0,u=1===a?t:ut.Deferred(),l=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?it.call(arguments):r,i===e?u.notifyWith(n,i):--a||u.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);s>r;r++)o[r]&&ut.isFunction(o[r].promise)?o[r].promise().done(l(r,i,o)).fail(u.reject).progress(l(r,n,e)):--a;return a||u.resolveWith(i,o),u.promise()}}),ut.support=function(){var e,n,i,r,o,s,a,u,l,c,p=V.createElement("div");if(p.setAttribute("className","t"),p.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=p.getElementsByTagName("*"),i=p.getElementsByTagName("a")[0],!n||!i||!n.length)return{};o=V.createElement("select"),a=o.appendChild(V.createElement("option")),r=p.getElementsByTagName("input")[0],i.style.cssText="top:1px;float:left;opacity:.5",e={getSetAttribute:"t"!==p.className,leadingWhitespace:3===p.firstChild.nodeType,tbody:!p.getElementsByTagName("tbody").length,htmlSerialize:!!p.getElementsByTagName("link").length,style:/top/.test(i.getAttribute("style")),hrefNormalized:"/a"===i.getAttribute("href"),opacity:/^0.5/.test(i.style.opacity),cssFloat:!!i.style.cssFloat,checkOn:!!r.value,optSelected:a.selected,enctype:!!V.createElement("form").enctype,html5Clone:"<:nav></:nav>"!==V.createElement("nav").cloneNode(!0).outerHTML,boxModel:"CSS1Compat"===V.compatMode,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},r.checked=!0,e.noCloneChecked=r.cloneNode(!0).checked,o.disabled=!0,e.optDisabled=!a.disabled;try{delete p.test}catch(h){e.deleteExpando=!1}r=V.createElement("input"),r.setAttribute("value",""),e.input=""===r.getAttribute("value"),r.value="t",r.setAttribute("type","radio"),e.radioValue="t"===r.value,r.setAttribute("checked","t"),r.setAttribute("name","t"),s=V.createDocumentFragment(),s.appendChild(r),e.appendChecked=r.checked,e.checkClone=s.cloneNode(!0).cloneNode(!0).lastChild.checked,p.attachEvent&&(p.attachEvent("onclick",function(){e.noCloneEvent=!1}),p.cloneNode(!0).click());for(c in{submit:!0,change:!0,focusin:!0})p.setAttribute(u="on"+c,"t"),e[c+"Bubbles"]=u in t||p.attributes[u].expando===!1;return p.style.backgroundClip="content-box",p.cloneNode(!0).style.backgroundClip="",e.clearCloneStyle="content-box"===p.style.backgroundClip,ut(function(){var n,i,r,o="padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",s=V.getElementsByTagName("body")[0];s&&(n=V.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",s.appendChild(n).appendChild(p),p.innerHTML="<table><tr><td></td><td>t</td></tr></table>",r=p.getElementsByTagName("td"),r[0].style.cssText="padding:0;margin:0;border:0;display:none",l=0===r[0].offsetHeight,r[0].style.display="",r[1].style.display="none",e.reliableHiddenOffsets=l&&0===r[0].offsetHeight,p.innerHTML="",p.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",
e.boxSizing=4===p.offsetWidth,e.doesNotIncludeMarginInBodyOffset=1!==s.offsetTop,t.getComputedStyle&&(e.pixelPosition="1%"!==(t.getComputedStyle(p,null)||{}).top,e.boxSizingReliable="4px"===(t.getComputedStyle(p,null)||{width:"4px"}).width,i=p.appendChild(V.createElement("div")),i.style.cssText=p.style.cssText=o,i.style.marginRight=i.style.width="0",p.style.width="1px",e.reliableMarginRight=!parseFloat((t.getComputedStyle(i,null)||{}).marginRight)),typeof p.style.zoom!==Y&&(p.innerHTML="",p.style.cssText=o+"width:1px;padding:1px;display:inline;zoom:1",e.inlineBlockNeedsLayout=3===p.offsetWidth,p.style.display="block",p.innerHTML="<div></div>",p.firstChild.style.width="5px",e.shrinkWrapBlocks=3!==p.offsetWidth,e.inlineBlockNeedsLayout&&(s.style.zoom=1)),s.removeChild(n),n=p=r=i=null)}),n=o=s=a=i=r=null,e}();var Et=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,Ct=/([A-Z])/g;ut.extend({cache:{},expando:"jQuery"+(tt+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(t){return t=t.nodeType?ut.cache[t[ut.expando]]:t[ut.expando],!!t&&!a(t)},data:function(t,e,n){return r(t,e,n)},removeData:function(t,e){return o(t,e)},_data:function(t,e,n){return r(t,e,n,!0)},_removeData:function(t,e){return o(t,e,!0)},acceptData:function(t){if(t.nodeType&&1!==t.nodeType&&9!==t.nodeType)return!1;var e=t.nodeName&&ut.noData[t.nodeName.toLowerCase()];return!e||e!==!0&&t.getAttribute("classid")===e}}),ut.fn.extend({data:function(t,n){var i,r,o=this[0],a=0,u=null;if(t===e){if(this.length&&(u=ut.data(o),1===o.nodeType&&!ut._data(o,"parsedAttrs"))){for(i=o.attributes;a<i.length;a++)r=i[a].name,r.indexOf("data-")||(r=ut.camelCase(r.slice(5)),s(o,r,u[r]));ut._data(o,"parsedAttrs",!0)}return u}return"object"==typeof t?this.each(function(){ut.data(this,t)}):ut.access(this,function(n){return n===e?o?s(o,t,ut.data(o,t)):null:void this.each(function(){ut.data(this,t,n)})},null,n,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){ut.removeData(this,t)})}}),ut.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=ut._data(t,e),n&&(!i||ut.isArray(n)?i=ut._data(t,e,ut.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=ut.queue(t,e),i=n.length,r=n.shift(),o=ut._queueHooks(t,e),s=function(){ut.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),o.cur=r,r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return ut._data(t,n)||ut._data(t,n,{empty:ut.Callbacks("once memory").add(function(){ut._removeData(t,e+"queue"),ut._removeData(t,n)})})}}),ut.fn.extend({queue:function(t,n){var i=2;return"string"!=typeof t&&(n=t,t="fx",i--),arguments.length<i?ut.queue(this[0],t):n===e?this:this.each(function(){var e=ut.queue(this,t,n);ut._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&ut.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ut.dequeue(this,t)})},delay:function(t,e){return t=ut.fx?ut.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,n){var i,r=1,o=ut.Deferred(),s=this,a=this.length,u=function(){--r||o.resolveWith(s,[s])};for("string"!=typeof t&&(n=t,t=e),t=t||"fx";a--;)i=ut._data(s[a],t+"queueHooks"),i&&i.empty&&(r++,i.empty.add(u));return u(),o.promise(n)}});var St,jt,Nt=/[\t\r\n]/g,Lt=/\r/g,kt=/^(?:input|select|textarea|button|object)$/i,It=/^(?:a|area)$/i,At=/^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,zt=/^(?:checked|selected)$/i,Dt=ut.support.getSetAttribute,Ht=ut.support.input;ut.fn.extend({attr:function(t,e){return ut.access(this,ut.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ut.removeAttr(this,t)})},prop:function(t,e){return ut.access(this,ut.prop,t,e,arguments.length>1)},removeProp:function(t){return t=ut.propFix[t]||t,this.each(function(){try{this[t]=e,delete this[t]}catch(n){}})},addClass:function(t){var e,n,i,r,o,s=0,a=this.length,u="string"==typeof t&&t;if(ut.isFunction(t))return this.each(function(e){ut(this).addClass(t.call(this,e,this.className))});if(u)for(e=(t||"").match(ct)||[];a>s;s++)if(n=this[s],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Nt," "):" ")){for(o=0;r=e[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");n.className=ut.trim(i)}return this},removeClass:function(t){var e,n,i,r,o,s=0,a=this.length,u=0===arguments.length||"string"==typeof t&&t;if(ut.isFunction(t))return this.each(function(e){ut(this).removeClass(t.call(this,e,this.className))});if(u)for(e=(t||"").match(ct)||[];a>s;s++)if(n=this[s],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Nt," "):"")){for(o=0;r=e[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");n.className=t?ut.trim(i):""}return this},toggleClass:function(t,e){var n=typeof t,i="boolean"==typeof e;return ut.isFunction(t)?this.each(function(n){ut(this).toggleClass(t.call(this,n,this.className,e),e)}):this.each(function(){if("string"===n)for(var r,o=0,s=ut(this),a=e,u=t.match(ct)||[];r=u[o++];)a=i?a:!s.hasClass(r),s[a?"addClass":"removeClass"](r);else n!==Y&&"boolean"!==n||(this.className&&ut._data(this,"__className__",this.className),this.className=this.className||t===!1?"":ut._data(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(Nt," ").indexOf(e)>=0)return!0;return!1},val:function(t){var n,i,r,o=this[0];{if(arguments.length)return r=ut.isFunction(t),this.each(function(n){var o,s=ut(this);1===this.nodeType&&(o=r?t.call(this,n,s.val()):t,null==o?o="":"number"==typeof o?o+="":ut.isArray(o)&&(o=ut.map(o,function(t){return null==t?"":t+""})),i=ut.valHooks[this.type]||ut.valHooks[this.nodeName.toLowerCase()],i&&"set"in i&&i.set(this,o,"value")!==e||(this.value=o))});if(o)return i=ut.valHooks[o.type]||ut.valHooks[o.nodeName.toLowerCase()],i&&"get"in i&&(n=i.get(o,"value"))!==e?n:(n=o.value,"string"==typeof n?n.replace(Lt,""):null==n?"":n)}}}),ut.extend({valHooks:{option:{get:function(t){var e=t.attributes.value;return!e||e.specified?t.value:t.text}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||0>r,s=o?null:[],a=o?r+1:i.length,u=0>r?a:o?r:0;a>u;u++)if(n=i[u],(n.selected||u===r)&&(ut.support.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ut.nodeName(n.parentNode,"optgroup"))){if(e=ut(n).val(),o)return e;s.push(e)}return s},set:function(t,e){var n=ut.makeArray(e);return ut(t).find("option").each(function(){this.selected=ut.inArray(ut(this).val(),n)>=0}),n.length||(t.selectedIndex=-1),n}}},attr:function(t,n,i){var r,o,s,a=t.nodeType;if(t&&3!==a&&8!==a&&2!==a)return typeof t.getAttribute===Y?ut.prop(t,n,i):(o=1!==a||!ut.isXMLDoc(t),o&&(n=n.toLowerCase(),r=ut.attrHooks[n]||(At.test(n)?jt:St)),i===e?r&&o&&"get"in r&&null!==(s=r.get(t,n))?s:(typeof t.getAttribute!==Y&&(s=t.getAttribute(n)),null==s?e:s):null!==i?r&&o&&"set"in r&&(s=r.set(t,i,n))!==e?s:(t.setAttribute(n,i+""),i):void ut.removeAttr(t,n))},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(ct);if(o&&1===t.nodeType)for(;n=o[r++];)i=ut.propFix[n]||n,At.test(n)?!Dt&&zt.test(n)?t[ut.camelCase("default-"+n)]=t[i]=!1:t[i]=!1:ut.attr(t,n,""),t.removeAttribute(Dt?n:i)},attrHooks:{type:{set:function(t,e){if(!ut.support.radioValue&&"radio"===e&&ut.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(t,n,i){var r,o,s,a=t.nodeType;if(t&&3!==a&&8!==a&&2!==a)return s=1!==a||!ut.isXMLDoc(t),s&&(n=ut.propFix[n]||n,o=ut.propHooks[n]),i!==e?o&&"set"in o&&(r=o.set(t,i,n))!==e?r:t[n]=i:o&&"get"in o&&null!==(r=o.get(t,n))?r:t[n]},propHooks:{tabIndex:{get:function(t){var n=t.getAttributeNode("tabindex");return n&&n.specified?parseInt(n.value,10):kt.test(t.nodeName)||It.test(t.nodeName)&&t.href?0:e}}}}),jt={get:function(t,n){var i=ut.prop(t,n),r="boolean"==typeof i&&t.getAttribute(n),o="boolean"==typeof i?Ht&&Dt?null!=r:zt.test(n)?t[ut.camelCase("default-"+n)]:!!r:t.getAttributeNode(n);return o&&o.value!==!1?n.toLowerCase():e},set:function(t,e,n){return e===!1?ut.removeAttr(t,n):Ht&&Dt||!zt.test(n)?t.setAttribute(!Dt&&ut.propFix[n]||n,n):t[ut.camelCase("default-"+n)]=t[n]=!0,n}},Ht&&Dt||(ut.attrHooks.value={get:function(t,n){var i=t.getAttributeNode(n);return ut.nodeName(t,"input")?t.defaultValue:i&&i.specified?i.value:e},set:function(t,e,n){return ut.nodeName(t,"input")?void(t.defaultValue=e):St&&St.set(t,e,n)}}),Dt||(St=ut.valHooks.button={get:function(t,n){var i=t.getAttributeNode(n);return i&&("id"===n||"name"===n||"coords"===n?""!==i.value:i.specified)?i.value:e},set:function(t,n,i){var r=t.getAttributeNode(i);return r||t.setAttributeNode(r=t.ownerDocument.createAttribute(i)),r.value=n+="","value"===i||n===t.getAttribute(i)?n:e}},ut.attrHooks.contenteditable={get:St.get,set:function(t,e,n){St.set(t,""===e?!1:e,n)}},ut.each(["width","height"],function(t,e){ut.attrHooks[e]=ut.extend(ut.attrHooks[e],{set:function(t,n){return""===n?(t.setAttribute(e,"auto"),n):void 0}})})),ut.support.hrefNormalized||(ut.each(["href","src","width","height"],function(t,n){ut.attrHooks[n]=ut.extend(ut.attrHooks[n],{get:function(t){var i=t.getAttribute(n,2);return null==i?e:i}})}),ut.each(["href","src"],function(t,e){ut.propHooks[e]={get:function(t){return t.getAttribute(e,4)}}})),ut.support.style||(ut.attrHooks.style={get:function(t){return t.style.cssText||e},set:function(t,e){return t.style.cssText=e+""}}),ut.support.optSelected||(ut.propHooks.selected=ut.extend(ut.propHooks.selected,{get:function(t){var e=t.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null}})),ut.support.enctype||(ut.propFix.enctype="encoding"),ut.support.checkOn||ut.each(["radio","checkbox"],function(){ut.valHooks[this]={get:function(t){return null===t.getAttribute("value")?"on":t.value}}}),ut.each(["radio","checkbox"],function(){ut.valHooks[this]=ut.extend(ut.valHooks[this],{set:function(t,e){return ut.isArray(e)?t.checked=ut.inArray(ut(t).val(),e)>=0:void 0}})});var Mt=/^(?:input|select|textarea)$/i,qt=/^key/,Ot=/^(?:mouse|contextmenu)|click/,Rt=/^(?:focusinfocus|focusoutblur)$/,Ft=/^([^.]*)(?:\.(.+)|)$/;ut.event={global:{},add:function(t,n,i,r,o){var s,a,u,l,c,p,h,f,d,m,y,g=ut._data(t);if(g){for(i.handler&&(l=i,i=l.handler,o=l.selector),i.guid||(i.guid=ut.guid++),(a=g.events)||(a=g.events={}),(p=g.handle)||(p=g.handle=function(t){return typeof ut===Y||t&&ut.event.triggered===t.type?e:ut.event.dispatch.apply(p.elem,arguments)},p.elem=t),n=(n||"").match(ct)||[""],u=n.length;u--;)s=Ft.exec(n[u])||[],d=y=s[1],m=(s[2]||"").split(".").sort(),c=ut.event.special[d]||{},d=(o?c.delegateType:c.bindType)||d,c=ut.event.special[d]||{},h=ut.extend({type:d,origType:y,data:r,handler:i,guid:i.guid,selector:o,needsContext:o&&ut.expr.match.needsContext.test(o),namespace:m.join(".")},l),(f=a[d])||(f=a[d]=[],f.delegateCount=0,c.setup&&c.setup.call(t,r,m,p)!==!1||(t.addEventListener?t.addEventListener(d,p,!1):t.attachEvent&&t.attachEvent("on"+d,p))),c.add&&(c.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),o?f.splice(f.delegateCount++,0,h):f.push(h),ut.event.global[d]=!0;t=null}},remove:function(t,e,n,i,r){var o,s,a,u,l,c,p,h,f,d,m,y=ut.hasData(t)&&ut._data(t);if(y&&(c=y.events)){for(e=(e||"").match(ct)||[""],l=e.length;l--;)if(a=Ft.exec(e[l])||[],f=m=a[1],d=(a[2]||"").split(".").sort(),f){for(p=ut.event.special[f]||{},f=(i?p.delegateType:p.bindType)||f,h=c[f]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=h.length;o--;)s=h[o],!r&&m!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||i&&i!==s.selector&&("**"!==i||!s.selector)||(h.splice(o,1),s.selector&&h.delegateCount--,p.remove&&p.remove.call(t,s));u&&!h.length&&(p.teardown&&p.teardown.call(t,d,y.handle)!==!1||ut.removeEvent(t,f,y.handle),delete c[f])}else for(f in c)ut.event.remove(t,f+e[l],n,i,!0);ut.isEmptyObject(c)&&(delete y.handle,ut._removeData(t,"events"))}},trigger:function(n,i,r,o){var s,a,u,l,c,p,h,f=[r||V],d=st.call(n,"type")?n.type:n,m=st.call(n,"namespace")?n.namespace.split("."):[];if(u=p=r=r||V,3!==r.nodeType&&8!==r.nodeType&&!Rt.test(d+ut.event.triggered)&&(d.indexOf(".")>=0&&(m=d.split("."),d=m.shift(),m.sort()),a=d.indexOf(":")<0&&"on"+d,n=n[ut.expando]?n:new ut.Event(d,"object"==typeof n&&n),n.isTrigger=!0,n.namespace=m.join("."),n.namespace_re=n.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=e,n.target||(n.target=r),i=null==i?[n]:ut.makeArray(i,[n]),c=ut.event.special[d]||{},o||!c.trigger||c.trigger.apply(r,i)!==!1)){if(!o&&!c.noBubble&&!ut.isWindow(r)){for(l=c.delegateType||d,Rt.test(l+d)||(u=u.parentNode);u;u=u.parentNode)f.push(u),p=u;p===(r.ownerDocument||V)&&f.push(p.defaultView||p.parentWindow||t)}for(h=0;(u=f[h++])&&!n.isPropagationStopped();)n.type=h>1?l:c.bindType||d,s=(ut._data(u,"events")||{})[n.type]&&ut._data(u,"handle"),s&&s.apply(u,i),s=a&&u[a],s&&ut.acceptData(u)&&s.apply&&s.apply(u,i)===!1&&n.preventDefault();if(n.type=d,!o&&!n.isDefaultPrevented()&&(!c._default||c._default.apply(r.ownerDocument,i)===!1)&&("click"!==d||!ut.nodeName(r,"a"))&&ut.acceptData(r)&&a&&r[d]&&!ut.isWindow(r)){p=r[a],p&&(r[a]=null),ut.event.triggered=d;try{r[d]()}catch(y){}ut.event.triggered=e,p&&(r[a]=p)}return n.result}},dispatch:function(t){t=ut.event.fix(t);var n,i,r,o,s,a=[],u=it.call(arguments),l=(ut._data(this,"events")||{})[t.type]||[],c=ut.event.special[t.type]||{};if(u[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(a=ut.event.handlers.call(this,t,l),n=0;(o=a[n++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,s=0;(r=o.handlers[s++])&&!t.isImmediatePropagationStopped();)t.namespace_re&&!t.namespace_re.test(r.namespace)||(t.handleObj=r,t.data=r.data,i=((ut.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,u),i!==e&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,n){var i,r,o,s,a=[],u=n.delegateCount,l=t.target;if(u&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==t.type)){for(o=[],s=0;u>s;s++)r=n[s],i=r.selector+" ",o[i]===e&&(o[i]=r.needsContext?ut(i,this).index(l)>=0:ut.find(i,this,null,[l]).length),o[i]&&o.push(r);o.length&&a.push({elem:l,handlers:o})}return u<n.length&&a.push({elem:this,handlers:n.slice(u)}),a},fix:function(t){if(t[ut.expando])return t;var e,n,i,r=t.type,o=t,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=Ot.test(r)?this.mouseHooks:qt.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new ut.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=o.srcElement||V),3===t.target.nodeType&&(t.target=t.target.parentNode),t.metaKey=!!t.metaKey,s.filter?s.filter(t,o):t},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,n){var i,r,o,s=n.button,a=n.fromElement;return null==t.pageX&&null!=n.clientX&&(r=t.target.ownerDocument||V,o=r.documentElement,i=r.body,t.pageX=n.clientX+(o&&o.scrollLeft||i&&i.scrollLeft||0)-(o&&o.clientLeft||i&&i.clientLeft||0),t.pageY=n.clientY+(o&&o.scrollTop||i&&i.scrollTop||0)-(o&&o.clientTop||i&&i.clientTop||0)),!t.relatedTarget&&a&&(t.relatedTarget=a===t.target?n.toElement:a),t.which||s===e||(t.which=1&s?1:2&s?3:4&s?2:0),t}},special:{load:{noBubble:!0},click:{trigger:function(){return ut.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0}},focus:{trigger:function(){if(this!==V.activeElement&&this.focus)try{return this.focus(),!1}catch(t){}},delegateType:"focusin"},blur:{trigger:function(){return this===V.activeElement&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},beforeunload:{postDispatch:function(t){t.result!==e&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var r=ut.extend(new ut.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?ut.event.trigger(r,null,e):ut.event.dispatch.call(e,r),r.isDefaultPrevented()&&n.preventDefault()}},ut.removeEvent=V.removeEventListener?function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)}:function(t,e,n){var i="on"+e;t.detachEvent&&(typeof t[i]===Y&&(t[i]=null),t.detachEvent(i,n))},ut.Event=function(t,e){return this instanceof ut.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||t.returnValue===!1||t.getPreventDefault&&t.getPreventDefault()?u:l):this.type=t,e&&ut.extend(this,e),this.timeStamp=t&&t.timeStamp||ut.now(),void(this[ut.expando]=!0)):new ut.Event(t,e)},ut.Event.prototype={isDefaultPrevented:l,isPropagationStopped:l,isImmediatePropagationStopped:l,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=u,t&&(t.preventDefault?t.preventDefault():t.returnValue=!1)},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=u,t&&(t.stopPropagation&&t.stopPropagation(),t.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=u,this.stopPropagation()}},ut.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(t,e){ut.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return r&&(r===i||ut.contains(i,r))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),ut.support.submitBubbles||(ut.event.special.submit={setup:function(){return ut.nodeName(this,"form")?!1:void ut.event.add(this,"click._submit keypress._submit",function(t){var n=t.target,i=ut.nodeName(n,"input")||ut.nodeName(n,"button")?n.form:e;i&&!ut._data(i,"submitBubbles")&&(ut.event.add(i,"submit._submit",function(t){t._submit_bubble=!0}),ut._data(i,"submitBubbles",!0))})},postDispatch:function(t){t._submit_bubble&&(delete t._submit_bubble,this.parentNode&&!t.isTrigger&&ut.event.simulate("submit",this.parentNode,t,!0))},teardown:function(){return ut.nodeName(this,"form")?!1:void ut.event.remove(this,"._submit")}}),ut.support.changeBubbles||(ut.event.special.change={setup:function(){return Mt.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(ut.event.add(this,"propertychange._change",function(t){"checked"===t.originalEvent.propertyName&&(this._just_changed=!0)}),ut.event.add(this,"click._change",function(t){this._just_changed&&!t.isTrigger&&(this._just_changed=!1),ut.event.simulate("change",this,t,!0)})),!1):void ut.event.add(this,"beforeactivate._change",function(t){var e=t.target;Mt.test(e.nodeName)&&!ut._data(e,"changeBubbles")&&(ut.event.add(e,"change._change",function(t){!this.parentNode||t.isSimulated||t.isTrigger||ut.event.simulate("change",this.parentNode,t,!0)}),ut._data(e,"changeBubbles",!0))})},handle:function(t){var e=t.target;return this!==e||t.isSimulated||t.isTrigger||"radio"!==e.type&&"checkbox"!==e.type?t.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return ut.event.remove(this,"._change"),!Mt.test(this.nodeName)}}),ut.support.focusinBubbles||ut.each({focus:"focusin",blur:"focusout"},function(t,e){var n=0,i=function(t){ut.event.simulate(e,t.target,ut.event.fix(t),!0)};ut.event.special[e]={setup:function(){0===n++&&V.addEventListener(t,i,!0)},teardown:function(){0===--n&&V.removeEventListener(t,i,!0)}}}),ut.fn.extend({on:function(t,n,i,r,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=e);for(s in t)this.on(s,n,i,t[s],o);return this}if(null==i&&null==r?(r=n,i=n=e):null==r&&("string"==typeof n?(r=i,i=e):(r=i,i=n,n=e)),r===!1)r=l;else if(!r)return this;return 1===o&&(a=r,r=function(t){return ut().off(t),a.apply(this,arguments)},r.guid=a.guid||(a.guid=ut.guid++)),this.each(function(){ut.event.add(this,t,r,i,n)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,n,i){var r,o;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,ut(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(o in t)this.off(o,n,t[o]);return this}return n!==!1&&"function"!=typeof n||(i=n,n=e),i===!1&&(i=l),this.each(function(){ut.event.remove(this,t,i,n)})},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},trigger:function(t,e){return this.each(function(){ut.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?ut.event.trigger(t,e,n,!0):void 0}}),function(t,e){function n(t){return dt.test(t+"")}function i(){var t,e=[];return t=function(n,i){return e.push(n+=" ")>E.cacheLength&&delete t[e.shift()],t[n]=i}}function r(t){return t[R]=!0,t}function o(t){var e=I.createElement("div");try{return t(e)}catch(n){return!1}finally{e=null}}function s(t,e,n,i){var r,o,s,a,u,l,c,f,d,m;if((e?e.ownerDocument||e:F)!==I&&k(e),e=e||I,n=n||[],!t||"string"!=typeof t)return n;if(1!==(a=e.nodeType)&&9!==a)return[];if(!z&&!i){if(r=mt.exec(t))if(s=r[1]){if(9===a){if(o=e.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(e.ownerDocument&&(o=e.ownerDocument.getElementById(s))&&q(e,o)&&o.id===s)return n.push(o),n}else{if(r[2])return J.apply(n,K.call(e.getElementsByTagName(t),0)),n;if((s=r[3])&&W.getByClassName&&e.getElementsByClassName)return J.apply(n,K.call(e.getElementsByClassName(s),0)),n}if(W.qsa&&!D.test(t)){if(c=!0,f=R,d=e,m=9===a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(l=p(t),(c=e.getAttribute("id"))?f=c.replace(vt,"\\$&"):e.setAttribute("id",f),f="[id='"+f+"'] ",u=l.length;u--;)l[u]=f+h(l[u]);d=ft.test(t)&&e.parentNode||e,m=l.join(",")}if(m)try{return J.apply(n,K.call(d.querySelectorAll(m),0)),n}catch(y){}finally{c||e.removeAttribute("id")}}}return b(t.replace(st,"$1"),e,n,i)}function a(t,e){var n=e&&t,i=n&&(~e.sourceIndex||V)-(~t.sourceIndex||V);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function u(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return r(function(e){return e=+e,r(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function p(t,e){var n,i,r,o,a,u,l,c=X[t+" "];if(c)return e?0:c.slice(0);for(a=t,u=[],l=E.preFilter;a;){n&&!(i=at.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(r=[])),n=!1,(i=lt.exec(a))&&(n=i.shift(),r.push({value:n,type:i[0].replace(st," ")}),a=a.slice(n.length));for(o in E.filter)!(i=ht[o].exec(a))||l[o]&&!(i=l[o](i))||(n=i.shift(),r.push({value:n,type:o,matches:i}),a=a.slice(n.length));if(!n)break}return e?a.length:a?s.error(t):X(t,u).slice(0)}function h(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function f(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=B++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,s){var a,u,l,c=P+" "+o;if(s){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||r)if(l=e[R]||(e[R]={}),(u=l[i])&&u[0]===c){if((a=u[1])===!0||a===T)return a===!0}else if(u=l[i]=[c],u[1]=t(e,n,s)||T,u[1]===!0)return!0}}function d(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function m(t,e,n,i,r){for(var o,s=[],a=0,u=t.length,l=null!=e;u>a;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),l&&e.push(a)));return s}function y(t,e,n,i,o,s){return i&&!i[R]&&(i=y(i)),o&&!o[R]&&(o=y(o,s)),r(function(r,s,a,u){var l,c,p,h=[],f=[],d=s.length,y=r||x(e||"*",a.nodeType?[a]:a,[]),g=!t||!r&&e?y:m(y,h,t,a,u),v=n?o||(r?t:d||i)?[]:s:g;if(n&&n(g,v,a,u),i)for(l=m(v,f),i(l,[],a,u),c=l.length;c--;)(p=l[c])&&(v[f[c]]=!(g[f[c]]=p));if(r){if(o||t){if(o){for(l=[],c=v.length;c--;)(p=v[c])&&l.push(g[c]=p);o(null,v=[],l,u)}for(c=v.length;c--;)(p=v[c])&&(l=o?Z.call(r,p):h[c])>-1&&(r[l]=!(s[l]=p))}}else v=m(v===s?v.splice(d,v.length):v),o?o(null,s,v,u):J.apply(s,v)})}function g(t){for(var e,n,i,r=t.length,o=E.relative[t[0].type],s=o||E.relative[" "],a=o?1:0,u=f(function(t){return t===e},s,!0),l=f(function(t){return Z.call(e,t)>-1},s,!0),c=[function(t,n,i){return!o&&(i||n!==L)||((e=n).nodeType?u(t,n,i):l(t,n,i))}];r>a;a++)if(n=E.relative[t[a].type])c=[f(d(c),n)];else{if(n=E.filter[t[a].type].apply(null,t[a].matches),n[R]){for(i=++a;r>i&&!E.relative[t[i].type];i++);return y(a>1&&d(c),a>1&&h(t.slice(0,a-1)).replace(st,"$1"),n,i>a&&g(t.slice(a,i)),r>i&&g(t=t.slice(i)),r>i&&h(t))}c.push(n)}return d(c)}function v(t,e){var n=0,i=e.length>0,o=t.length>0,a=function(r,a,u,l,c){var p,h,f,d=[],y=0,g="0",v=r&&[],x=null!=c,b=L,_=r||o&&E.find.TAG("*",c&&a.parentNode||a),w=P+=null==b?1:Math.random()||.1;for(x&&(L=a!==I&&a,T=n);null!=(p=_[g]);g++){if(o&&p){for(h=0;f=t[h++];)if(f(p,a,u)){l.push(p);break}x&&(P=w,T=++n)}i&&((p=!f&&p)&&y--,r&&v.push(p))}if(y+=g,i&&g!==y){for(h=0;f=e[h++];)f(v,d,a,u);if(r){if(y>0)for(;g--;)v[g]||d[g]||(d[g]=G.call(l));d=m(d)}J.apply(l,d),x&&!r&&d.length>0&&y+e.length>1&&s.uniqueSort(l)}return x&&(P=w,L=b),v};return i?r(a):a}function x(t,e,n){for(var i=0,r=e.length;r>i;i++)s(t,e[i],n);return n}function b(t,e,n,i){var r,o,s,a,u,l=p(t);if(!i&&1===l.length){if(o=l[0]=l[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&9===e.nodeType&&!z&&E.relative[o[1].type]){if(e=E.find.ID(s.matches[0].replace(bt,_t),e)[0],!e)return n;t=t.slice(o.shift().value.length)}for(r=ht.needsContext.test(t)?0:o.length;r--&&(s=o[r],!E.relative[a=s.type]);)if((u=E.find[a])&&(i=u(s.matches[0].replace(bt,_t),ft.test(o[0].type)&&e.parentNode||e))){if(o.splice(r,1),t=i.length&&h(o),!t)return J.apply(n,K.call(i,0)),n;break}}return j(t,l)(i,e,z,n,ft.test(t)),n}function _(){}var w,T,E,C,S,j,N,L,k,I,A,z,D,H,M,q,O,R="sizzle"+-new Date,F=t.document,W={},P=0,B=0,$=i(),X=i(),U=i(),Y=typeof e,V=1<<31,Q=[],G=Q.pop,J=Q.push,K=Q.slice,Z=Q.indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(this[e]===t)return e;return-1},tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",nt=et.replace("w","w#"),it="([*^$|!~]?=)",rt="\\["+tt+"*("+et+")"+tt+"*(?:"+it+tt+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+nt+")|)|)"+tt+"*\\]",ot=":("+et+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+rt.replace(3,8)+")*)|.*)\\)|)",st=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),at=new RegExp("^"+tt+"*,"+tt+"*"),lt=new RegExp("^"+tt+"*([\\x20\\t\\r\\n\\f>+~])"+tt+"*"),ct=new RegExp(ot),pt=new RegExp("^"+nt+"$"),ht={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),NAME:new RegExp("^\\[name=['\"]?("+et+")['\"]?\\]"),TAG:new RegExp("^("+et.replace("w","w*")+")"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},ft=/[\x20\t\r\n\f]*[+~]/,dt=/^[^{]+\{\s*\[native code/,mt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,yt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,vt=/'|\\/g,xt=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,bt=/\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,_t=function(t,e){var n="0x"+e-65536;return n!==n?e:0>n?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)};try{K.call(F.documentElement.childNodes,0)[0].nodeType}catch(wt){K=function(t){for(var e,n=[];e=this[t++];)n.push(e);return n}}S=s.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},k=s.setDocument=function(t){var i=t?t.ownerDocument||t:F;return i!==I&&9===i.nodeType&&i.documentElement?(I=i,A=i.documentElement,z=S(i),W.tagNameNoComments=o(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),W.attributes=o(function(t){t.innerHTML="<select></select>";var e=typeof t.lastChild.getAttribute("multiple");return"boolean"!==e&&"string"!==e}),W.getByClassName=o(function(t){return t.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",t.getElementsByClassName&&t.getElementsByClassName("e").length?(t.lastChild.className="e",2===t.getElementsByClassName("e").length):!1}),W.getByName=o(function(t){t.id=R+0,t.innerHTML="<a name='"+R+"'></a><div name='"+R+"'></div>",A.insertBefore(t,A.firstChild);var e=i.getElementsByName&&i.getElementsByName(R).length===2+i.getElementsByName(R+0).length;return W.getIdNotName=!i.getElementById(R),A.removeChild(t),e}),E.attrHandle=o(function(t){return t.innerHTML="<a href='#'></a>",t.firstChild&&typeof t.firstChild.getAttribute!==Y&&"#"===t.firstChild.getAttribute("href")})?{}:{href:function(t){return t.getAttribute("href",2)},type:function(t){return t.getAttribute("type")}},W.getIdNotName?(E.find.ID=function(t,e){if(typeof e.getElementById!==Y&&!z){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},E.filter.ID=function(t){var e=t.replace(bt,_t);return function(t){return t.getAttribute("id")===e}}):(E.find.ID=function(t,n){if(typeof n.getElementById!==Y&&!z){var i=n.getElementById(t);return i?i.id===t||typeof i.getAttributeNode!==Y&&i.getAttributeNode("id").value===t?[i]:e:[]}},E.filter.ID=function(t){var e=t.replace(bt,_t);return function(t){var n=typeof t.getAttributeNode!==Y&&t.getAttributeNode("id");return n&&n.value===e}}),E.find.TAG=W.tagNameNoComments?function(t,e){return typeof e.getElementsByTagName!==Y?e.getElementsByTagName(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},E.find.NAME=W.getByName&&function(t,e){return typeof e.getElementsByName!==Y?e.getElementsByName(name):void 0},E.find.CLASS=W.getByClassName&&function(t,e){return typeof e.getElementsByClassName===Y||z?void 0:e.getElementsByClassName(t)},H=[],D=[":focus"],(W.qsa=n(i.querySelectorAll))&&(o(function(t){t.innerHTML="<select><option selected=''></option></select>",t.querySelectorAll("[selected]").length||D.push("\\["+tt+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),t.querySelectorAll(":checked").length||D.push(":checked")}),o(function(t){t.innerHTML="<input type='hidden' i=''/>",t.querySelectorAll("[i^='']").length&&D.push("[*^$]="+tt+"*(?:\"\"|'')"),t.querySelectorAll(":enabled").length||D.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),D.push(",.*:")})),(W.matchesSelector=n(M=A.matchesSelector||A.mozMatchesSelector||A.webkitMatchesSelector||A.oMatchesSelector||A.msMatchesSelector))&&o(function(t){W.disconnectedMatch=M.call(t,"div"),M.call(t,"[s!='']:x"),H.push("!=",ot)}),D=new RegExp(D.join("|")),H=new RegExp(H.join("|")),q=n(A.contains)||A.compareDocumentPosition?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},O=A.compareDocumentPosition?function(t,e){var n;return t===e?(N=!0,0):(n=e.compareDocumentPosition&&t.compareDocumentPosition&&t.compareDocumentPosition(e))?1&n||t.parentNode&&11===t.parentNode.nodeType?t===i||q(F,t)?-1:e===i||q(F,e)?1:0:4&n?-1:1:t.compareDocumentPosition?-1:1;
}:function(t,e){var n,r=0,o=t.parentNode,s=e.parentNode,u=[t],l=[e];if(t===e)return N=!0,0;if(!o||!s)return t===i?-1:e===i?1:o?-1:s?1:0;if(o===s)return a(t,e);for(n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;u[r]===l[r];)r++;return r?a(u[r],l[r]):u[r]===F?-1:l[r]===F?1:0},N=!1,[0,0].sort(O),W.detectDuplicates=N,I):I},s.matches=function(t,e){return s(t,null,null,e)},s.matchesSelector=function(t,e){if((t.ownerDocument||t)!==I&&k(t),e=e.replace(xt,"='$1']"),W.matchesSelector&&!z&&(!H||!H.test(e))&&!D.test(e))try{var n=M.call(t,e);if(n||W.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(i){}return s(e,I,null,[t]).length>0},s.contains=function(t,e){return(t.ownerDocument||t)!==I&&k(t),q(t,e)},s.attr=function(t,e){var n;return(t.ownerDocument||t)!==I&&k(t),z||(e=e.toLowerCase()),(n=E.attrHandle[e])?n(t):z||W.attributes?t.getAttribute(e):((n=t.getAttributeNode(e))||t.getAttribute(e))&&t[e]===!0?e:n&&n.specified?n.value:null},s.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},s.uniqueSort=function(t){var e,n=[],i=1,r=0;if(N=!W.detectDuplicates,t.sort(O),N){for(;e=t[i];i++)e===t[i-1]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return t},C=s.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=C(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i];i++)n+=C(e);return n},E=s.selectors={cacheLength:50,createPseudo:r,match:ht,find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(bt,_t),t[3]=(t[4]||t[5]||"").replace(bt,_t),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||s.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&s.error(t[0]),t},PSEUDO:function(t){var e,n=!t[5]&&t[2];return ht.CHILD.test(t[0])?null:(t[4]?t[2]=t[4]:n&&ct.test(n)&&(e=p(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){return"*"===t?function(){return!0}:(t=t.replace(bt,_t).toLowerCase(),function(e){return e.nodeName&&e.nodeName.toLowerCase()===t})},CLASS:function(t){var e=$[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&$(t,function(t){return e.test(t.className||typeof t.getAttribute!==Y&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(i){var r=s.attr(i,t);return null==r?"!="===e:e?(r+="","="===e?r===n:"!="===e?r!==n:"^="===e?n&&0===r.indexOf(n):"*="===e?n&&r.indexOf(n)>-1:"$="===e?n&&r.slice(-n.length)===n:"~="===e?(" "+r+" ").indexOf(n)>-1:"|="===e?r===n||r.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,u){var l,c,p,h,f,d,m=o!==s?"nextSibling":"previousSibling",y=e.parentNode,g=a&&e.nodeName.toLowerCase(),v=!u&&!a;if(y){if(o){for(;m;){for(p=e;p=p[m];)if(a?p.nodeName.toLowerCase()===g:1===p.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?y.firstChild:y.lastChild],s&&v){for(c=y[R]||(y[R]={}),l=c[t]||[],f=l[0]===P&&l[1],h=l[0]===P&&l[2],p=f&&y.childNodes[f];p=++f&&p&&p[m]||(h=f=0)||d.pop();)if(1===p.nodeType&&++h&&p===e){c[t]=[P,f,h];break}}else if(v&&(l=(e[R]||(e[R]={}))[t])&&l[0]===P)h=l[1];else for(;(p=++f&&p&&p[m]||(h=f=0)||d.pop())&&((a?p.nodeName.toLowerCase()!==g:1!==p.nodeType)||!++h||(v&&((p[R]||(p[R]={}))[t]=[P,h]),p!==e)););return h-=r,h===i||h%i===0&&h/i>=0}}},PSEUDO:function(t,e){var n,i=E.pseudos[t]||E.setFilters[t.toLowerCase()]||s.error("unsupported pseudo: "+t);return i[R]?i(e):i.length>1?(n=[t,t,"",e],E.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,n){for(var r,o=i(t,e),s=o.length;s--;)r=Z.call(t,o[s]),t[r]=!(n[r]=o[s])}):function(t){return i(t,0,n)}):i}},pseudos:{not:r(function(t){var e=[],n=[],i=j(t.replace(st,"$1"));return i[R]?r(function(t,e,n,r){for(var o,s=i(t,null,r,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),!n.pop()}}),has:r(function(t){return function(e){return s(t,e).length>0}}),contains:r(function(t){return function(e){return(e.textContent||e.innerText||C(e)).indexOf(t)>-1}}),lang:r(function(t){return pt.test(t||"")||s.error("unsupported lang: "+t),t=t.replace(bt,_t).toLowerCase(),function(e){var n;do if(n=z?e.getAttribute("xml:lang")||e.getAttribute("lang"):e.lang)return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===A},focus:function(t){return t===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeName>"@"||3===t.nodeType||4===t.nodeType)return!1;return!0},parent:function(t){return!E.pseudos.empty(t)},header:function(t){return gt.test(t.nodeName)},input:function(t){return yt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||e.toLowerCase()===t.type)},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[0>n?n+e:n]}),even:c(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:c(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}};for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})E.pseudos[w]=u(w);for(w in{submit:!0,reset:!0})E.pseudos[w]=l(w);j=s.compile=function(t,e){var n,i=[],r=[],o=U[t+" "];if(!o){for(e||(e=p(t)),n=e.length;n--;)o=g(e[n]),o[R]?i.push(o):r.push(o);o=U(t,v(r,i))}return o},E.pseudos.nth=E.pseudos.eq,E.filters=_.prototype=E.pseudos,E.setFilters=new _,k(),s.attr=ut.attr,ut.find=s,ut.expr=s.selectors,ut.expr[":"]=ut.expr.pseudos,ut.unique=s.uniqueSort,ut.text=s.getText,ut.isXMLDoc=s.isXML,ut.contains=s.contains}(t);var Wt=/Until$/,Pt=/^(?:parents|prev(?:Until|All))/,Bt=/^.[^:#\[\.,]*$/,$t=ut.expr.match.needsContext,Xt={children:!0,contents:!0,next:!0,prev:!0};ut.fn.extend({find:function(t){var e,n,i,r=this.length;if("string"!=typeof t)return i=this,this.pushStack(ut(t).filter(function(){for(e=0;r>e;e++)if(ut.contains(i[e],this))return!0}));for(n=[],e=0;r>e;e++)ut.find(t,this[e],n);return n=this.pushStack(r>1?ut.unique(n):n),n.selector=(this.selector?this.selector+" ":"")+t,n},has:function(t){var e,n=ut(t,this),i=n.length;return this.filter(function(){for(e=0;i>e;e++)if(ut.contains(this,n[e]))return!0})},not:function(t){return this.pushStack(p(this,t,!1))},filter:function(t){return this.pushStack(p(this,t,!0))},is:function(t){return!!t&&("string"==typeof t?$t.test(t)?ut(t,this.context).index(this[0])>=0:ut.filter(t,this).length>0:this.filter(t).length>0)},closest:function(t,e){for(var n,i=0,r=this.length,o=[],s=$t.test(t)||"string"!=typeof t?ut(t,e||this.context):0;r>i;i++)for(n=this[i];n&&n.ownerDocument&&n!==e&&11!==n.nodeType;){if(s?s.index(n)>-1:ut.find.matchesSelector(n,t)){o.push(n);break}n=n.parentNode}return this.pushStack(o.length>1?ut.unique(o):o)},index:function(t){return t?"string"==typeof t?ut.inArray(this[0],ut(t)):ut.inArray(t.jquery?t[0]:t,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){var n="string"==typeof t?ut(t,e):ut.makeArray(t&&t.nodeType?[t]:t),i=ut.merge(this.get(),n);return this.pushStack(ut.unique(i))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ut.fn.andSelf=ut.fn.addBack,ut.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ut.dir(t,"parentNode")},parentsUntil:function(t,e,n){return ut.dir(t,"parentNode",n)},next:function(t){return c(t,"nextSibling")},prev:function(t){return c(t,"previousSibling")},nextAll:function(t){return ut.dir(t,"nextSibling")},prevAll:function(t){return ut.dir(t,"previousSibling")},nextUntil:function(t,e,n){return ut.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return ut.dir(t,"previousSibling",n)},siblings:function(t){return ut.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return ut.sibling(t.firstChild)},contents:function(t){return ut.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:ut.merge([],t.childNodes)}},function(t,e){ut.fn[t]=function(n,i){var r=ut.map(this,e,n);return Wt.test(t)||(i=n),i&&"string"==typeof i&&(r=ut.filter(i,r)),r=this.length>1&&!Xt[t]?ut.unique(r):r,this.length>1&&Pt.test(t)&&(r=r.reverse()),this.pushStack(r)}}),ut.extend({filter:function(t,e,n){return n&&(t=":not("+t+")"),1===e.length?ut.find.matchesSelector(e[0],t)?[e[0]]:[]:ut.find.matches(t,e)},dir:function(t,n,i){for(var r=[],o=t[n];o&&9!==o.nodeType&&(i===e||1!==o.nodeType||!ut(o).is(i));)1===o.nodeType&&r.push(o),o=o[n];return r},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}});var Ut="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",Yt=/ jQuery\d+="(?:null|\d+)"/g,Vt=new RegExp("<(?:"+Ut+")[\\s/>]","i"),Qt=/^\s+/,Gt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Jt=/<([\w:]+)/,Kt=/<tbody/i,Zt=/<|&#?\w+;/,te=/<(?:script|style|link)/i,ee=/^(?:checkbox|radio)$/i,ne=/checked\s*(?:[^=]|=\s*.checked.)/i,ie=/^$|\/(?:java|ecma)script/i,re=/^true\/(.*)/,oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,se={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ut.support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},ae=h(V),ue=ae.appendChild(V.createElement("div"));se.optgroup=se.option,se.tbody=se.tfoot=se.colgroup=se.caption=se.thead,se.th=se.td,ut.fn.extend({text:function(t){return ut.access(this,function(t){return t===e?ut.text(this):this.empty().append((this[0]&&this[0].ownerDocument||V).createTextNode(t))},null,t,arguments.length)},wrapAll:function(t){if(ut.isFunction(t))return this.each(function(e){ut(this).wrapAll(t.call(this,e))});if(this[0]){var e=ut(t,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstChild&&1===t.firstChild.nodeType;)t=t.firstChild;return t}).append(this)}return this},wrapInner:function(t){return ut.isFunction(t)?this.each(function(e){ut(this).wrapInner(t.call(this,e))}):this.each(function(){var e=ut(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=ut.isFunction(t);return this.each(function(n){ut(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){ut.nodeName(this,"body")||ut(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||this.appendChild(t)})},prepend:function(){return this.domManip(arguments,!0,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||this.insertBefore(t,this.firstChild)})},before:function(){return this.domManip(arguments,!1,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,!1,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=0;null!=(n=this[i]);i++)(!t||ut.filter(t,[n]).length>0)&&(e||1!==n.nodeType||ut.cleanData(x(n)),n.parentNode&&(e&&ut.contains(n.ownerDocument,n)&&y(x(n,"script")),n.parentNode.removeChild(n)));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++){for(1===t.nodeType&&ut.cleanData(x(t,!1));t.firstChild;)t.removeChild(t.firstChild);t.options&&ut.nodeName(t,"select")&&(t.options.length=0)}return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return ut.clone(this,t,e)})},html:function(t){return ut.access(this,function(t){var n=this[0]||{},i=0,r=this.length;if(t===e)return 1===n.nodeType?n.innerHTML.replace(Yt,""):e;if("string"==typeof t&&!te.test(t)&&(ut.support.htmlSerialize||!Vt.test(t))&&(ut.support.leadingWhitespace||!Qt.test(t))&&!se[(Jt.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Gt,"<$1></$2>");try{for(;r>i;i++)n=this[i]||{},1===n.nodeType&&(ut.cleanData(x(n,!1)),n.innerHTML=t);n=0}catch(o){}}n&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(t){var e=ut.isFunction(t);return e||"string"==typeof t||(t=ut(t).not(this).detach()),this.domManip([t],!0,function(t){var e=this.nextSibling,n=this.parentNode;n&&(ut(this).remove(),n.insertBefore(t,e))})},detach:function(t){return this.remove(t,!0)},domManip:function(t,n,i){t=et.apply([],t);var r,o,s,a,u,l,c=0,p=this.length,h=this,y=p-1,g=t[0],v=ut.isFunction(g);if(v||!(1>=p||"string"!=typeof g||ut.support.checkClone)&&ne.test(g))return this.each(function(r){var o=h.eq(r);v&&(t[0]=g.call(this,r,n?o.html():e)),o.domManip(t,n,i)});if(p&&(l=ut.buildFragment(t,this[0].ownerDocument,!1,this),r=l.firstChild,1===l.childNodes.length&&(l=r),r)){for(n=n&&ut.nodeName(r,"tr"),a=ut.map(x(l,"script"),d),s=a.length;p>c;c++)o=l,c!==y&&(o=ut.clone(o,!0,!0),s&&ut.merge(a,x(o,"script"))),i.call(n&&ut.nodeName(this[c],"table")?f(this[c],"tbody"):this[c],o,c);if(s)for(u=a[a.length-1].ownerDocument,ut.map(a,m),c=0;s>c;c++)o=a[c],ie.test(o.type||"")&&!ut._data(o,"globalEval")&&ut.contains(u,o)&&(o.src?ut.ajax({url:o.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):ut.globalEval((o.text||o.textContent||o.innerHTML||"").replace(oe,"")));l=r=null}return this}}),ut.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ut.fn[t]=function(t){for(var n,i=0,r=[],o=ut(t),s=o.length-1;s>=i;i++)n=i===s?this:this.clone(!0),ut(o[i])[e](n),nt.apply(r,n.get());return this.pushStack(r)}}),ut.extend({clone:function(t,e,n){var i,r,o,s,a,u=ut.contains(t.ownerDocument,t);if(ut.support.html5Clone||ut.isXMLDoc(t)||!Vt.test("<"+t.nodeName+">")?o=t.cloneNode(!0):(ue.innerHTML=t.outerHTML,ue.removeChild(o=ue.firstChild)),!(ut.support.noCloneEvent&&ut.support.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ut.isXMLDoc(t)))for(i=x(o),a=x(t),s=0;null!=(r=a[s]);++s)i[s]&&v(r,i[s]);if(e)if(n)for(a=a||x(t),i=i||x(o),s=0;null!=(r=a[s]);s++)g(r,i[s]);else g(t,o);return i=x(o,"script"),i.length>0&&y(i,!u&&x(t,"script")),i=a=r=null,o},buildFragment:function(t,e,n,i){for(var r,o,s,a,u,l,c,p=t.length,f=h(e),d=[],m=0;p>m;m++)if(o=t[m],o||0===o)if("object"===ut.type(o))ut.merge(d,o.nodeType?[o]:o);else if(Zt.test(o)){for(a=a||f.appendChild(e.createElement("div")),u=(Jt.exec(o)||["",""])[1].toLowerCase(),c=se[u]||se._default,a.innerHTML=c[1]+o.replace(Gt,"<$1></$2>")+c[2],r=c[0];r--;)a=a.lastChild;if(!ut.support.leadingWhitespace&&Qt.test(o)&&d.push(e.createTextNode(Qt.exec(o)[0])),!ut.support.tbody)for(o="table"!==u||Kt.test(o)?"<table>"!==c[1]||Kt.test(o)?0:a:a.firstChild,r=o&&o.childNodes.length;r--;)ut.nodeName(l=o.childNodes[r],"tbody")&&!l.childNodes.length&&o.removeChild(l);for(ut.merge(d,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=f.lastChild}else d.push(e.createTextNode(o));for(a&&f.removeChild(a),ut.support.appendChecked||ut.grep(x(d,"input"),b),m=0;o=d[m++];)if((!i||-1===ut.inArray(o,i))&&(s=ut.contains(o.ownerDocument,o),a=x(f.appendChild(o),"script"),s&&y(a),n))for(r=0;o=a[r++];)ie.test(o.type||"")&&n.push(o);return a=null,f},cleanData:function(t,e){for(var n,i,r,o,s=0,a=ut.expando,u=ut.cache,l=ut.support.deleteExpando,c=ut.event.special;null!=(n=t[s]);s++)if((e||ut.acceptData(n))&&(r=n[a],o=r&&u[r])){if(o.events)for(i in o.events)c[i]?ut.event.remove(n,i):ut.removeEvent(n,i,o.handle);u[r]&&(delete u[r],l?delete n[a]:typeof n.removeAttribute!==Y?n.removeAttribute(a):n[a]=null,Z.push(r))}}});var le,ce,pe,he=/alpha\([^)]*\)/i,fe=/opacity\s*=\s*([^)]*)/,de=/^(top|right|bottom|left)$/,me=/^(none|table(?!-c[ea]).+)/,ye=/^margin/,ge=new RegExp("^("+lt+")(.*)$","i"),ve=new RegExp("^("+lt+")(?!px)[a-z%]+$","i"),xe=new RegExp("^([+-])=("+lt+")","i"),be={BODY:"block"},_e={position:"absolute",visibility:"hidden",display:"block"},we={letterSpacing:0,fontWeight:400},Te=["Top","Right","Bottom","Left"],Ee=["Webkit","O","Moz","ms"];ut.fn.extend({css:function(t,n){return ut.access(this,function(t,n,i){var r,o,s={},a=0;if(ut.isArray(n)){for(o=ce(t),r=n.length;r>a;a++)s[n[a]]=ut.css(t,n[a],!1,o);return s}return i!==e?ut.style(t,n,i):ut.css(t,n)},t,n,arguments.length>1)},show:function(){return T(this,!0)},hide:function(){return T(this)},toggle:function(t){var e="boolean"==typeof t;return this.each(function(){(e?t:w(this))?ut(this).show():ut(this).hide()})}}),ut.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=pe(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":ut.support.cssFloat?"cssFloat":"styleFloat"},style:function(t,n,i,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,a,u=ut.camelCase(n),l=t.style;if(n=ut.cssProps[u]||(ut.cssProps[u]=_(l,u)),a=ut.cssHooks[n]||ut.cssHooks[u],i===e)return a&&"get"in a&&(o=a.get(t,!1,r))!==e?o:l[n];if(s=typeof i,"string"===s&&(o=xe.exec(i))&&(i=(o[1]+1)*o[2]+parseFloat(ut.css(t,n)),s="number"),!(null==i||"number"===s&&isNaN(i)||("number"!==s||ut.cssNumber[u]||(i+="px"),ut.support.clearCloneStyle||""!==i||0!==n.indexOf("background")||(l[n]="inherit"),a&&"set"in a&&(i=a.set(t,i,r))===e)))try{l[n]=i}catch(c){}}},css:function(t,n,i,r){var o,s,a,u=ut.camelCase(n);return n=ut.cssProps[u]||(ut.cssProps[u]=_(t.style,u)),a=ut.cssHooks[n]||ut.cssHooks[u],a&&"get"in a&&(s=a.get(t,!0,i)),s===e&&(s=pe(t,n,r)),"normal"===s&&n in we&&(s=we[n]),""===i||i?(o=parseFloat(s),i===!0||ut.isNumeric(o)?o||0:s):s},swap:function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r}}),t.getComputedStyle?(ce=function(e){return t.getComputedStyle(e,null)},pe=function(t,n,i){var r,o,s,a=i||ce(t),u=a?a.getPropertyValue(n)||a[n]:e,l=t.style;return a&&(""!==u||ut.contains(t.ownerDocument,t)||(u=ut.style(t,n)),ve.test(u)&&ye.test(n)&&(r=l.width,o=l.minWidth,s=l.maxWidth,l.minWidth=l.maxWidth=l.width=u,u=a.width,l.width=r,l.minWidth=o,l.maxWidth=s)),u}):V.documentElement.currentStyle&&(ce=function(t){return t.currentStyle},pe=function(t,n,i){var r,o,s,a=i||ce(t),u=a?a[n]:e,l=t.style;return null==u&&l&&l[n]&&(u=l[n]),ve.test(u)&&!de.test(n)&&(r=l.left,o=t.runtimeStyle,s=o&&o.left,s&&(o.left=t.currentStyle.left),l.left="fontSize"===n?"1em":u,u=l.pixelLeft+"px",l.left=r,s&&(o.left=s)),""===u?"auto":u}),ut.each(["height","width"],function(t,e){ut.cssHooks[e]={get:function(t,n,i){return n?0===t.offsetWidth&&me.test(ut.css(t,"display"))?ut.swap(t,_e,function(){return S(t,e,i)}):S(t,e,i):void 0},set:function(t,n,i){var r=i&&ce(t);return E(t,n,i?C(t,e,i,ut.support.boxSizing&&"border-box"===ut.css(t,"boxSizing",!1,r),r):0)}}}),ut.support.opacity||(ut.cssHooks.opacity={get:function(t,e){return fe.test((e&&t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":e?"1":""},set:function(t,e){var n=t.style,i=t.currentStyle,r=ut.isNumeric(e)?"alpha(opacity="+100*e+")":"",o=i&&i.filter||n.filter||"";n.zoom=1,(e>=1||""===e)&&""===ut.trim(o.replace(he,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===e||i&&!i.filter)||(n.filter=he.test(o)?o.replace(he,r):o+" "+r)}}),ut(function(){ut.support.reliableMarginRight||(ut.cssHooks.marginRight={get:function(t,e){return e?ut.swap(t,{display:"inline-block"},pe,[t,"marginRight"]):void 0}}),!ut.support.pixelPosition&&ut.fn.position&&ut.each(["top","left"],function(t,e){ut.cssHooks[e]={get:function(t,n){return n?(n=pe(t,e),ve.test(n)?ut(t).position()[e]+"px":n):void 0}}})}),ut.expr&&ut.expr.filters&&(ut.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0||!ut.support.reliableHiddenOffsets&&"none"===(t.style&&t.style.display||ut.css(t,"display"))},ut.expr.filters.visible=function(t){return!ut.expr.filters.hidden(t)}),ut.each({margin:"",padding:"",border:"Width"},function(t,e){ut.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[t+Te[i]+e]=o[i]||o[i-2]||o[0];return r}},ye.test(t)||(ut.cssHooks[t+e].set=E)});var Ce=/%20/g,Se=/\[\]$/,je=/\r?\n/g,Ne=/^(?:submit|button|image|reset|file)$/i,Le=/^(?:input|select|textarea|keygen)/i;ut.fn.extend({serialize:function(){return ut.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=ut.prop(this,"elements");return t?ut.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!ut(this).is(":disabled")&&Le.test(this.nodeName)&&!Ne.test(t)&&(this.checked||!ee.test(t))}).map(function(t,e){var n=ut(this).val();return null==n?null:ut.isArray(n)?ut.map(n,function(t){return{name:e.name,value:t.replace(je,"\r\n")}}):{name:e.name,value:n.replace(je,"\r\n")}}).get()}}),ut.param=function(t,n){var i,r=[],o=function(t,e){e=ut.isFunction(e)?e():null==e?"":e,r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(n===e&&(n=ut.ajaxSettings&&ut.ajaxSettings.traditional),ut.isArray(t)||t.jquery&&!ut.isPlainObject(t))ut.each(t,function(){o(this.name,this.value)});else for(i in t)L(i,t[i],n,o);return r.join("&").replace(Ce,"+")},ut.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){ut.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),ut.fn.hover=function(t,e){return this.mouseenter(t).mouseleave(e||t)};var ke,Ie,Ae=ut.now(),ze=/\?/,De=/#.*$/,He=/([?&])_=[^&]*/,Me=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,qe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Oe=/^(?:GET|HEAD)$/,Re=/^\/\//,Fe=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,We=ut.fn.load,Pe={},Be={},$e="*/".concat("*");try{Ie=Q.href}catch(Xe){Ie=V.createElement("a"),Ie.href="",Ie=Ie.href}ke=Fe.exec(Ie.toLowerCase())||[],ut.fn.load=function(t,n,i){if("string"!=typeof t&&We)return We.apply(this,arguments);var r,o,s,a=this,u=t.indexOf(" ");return u>=0&&(r=t.slice(u,t.length),t=t.slice(0,u)),ut.isFunction(n)?(i=n,n=e):n&&"object"==typeof n&&(s="POST"),a.length>0&&ut.ajax({url:t,type:s,dataType:"html",data:n}).done(function(t){o=arguments,a.html(r?ut("<div>").append(ut.parseHTML(t)).find(r):t)}).complete(i&&function(t,e){a.each(i,o||[t.responseText,e,t])}),this},ut.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ut.fn[e]=function(t){return this.on(e,t)}}),ut.each(["get","post"],function(t,n){ut[n]=function(t,i,r,o){return ut.isFunction(i)&&(o=o||r,r=i,i=e),ut.ajax({url:t,type:n,dataType:o,data:i,success:r})}}),ut.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ie,type:"GET",isLocal:qe.test(ke[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$e,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":t.String,"text html":!0,"text json":ut.parseJSON,"text xml":ut.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?A(A(t,ut.ajaxSettings),e):A(ut.ajaxSettings,t)},ajaxPrefilter:k(Pe),ajaxTransport:k(Be),ajax:function(t,n){function i(t,n,i,r){var o,p,v,x,_,T=n;2!==b&&(b=2,u&&clearTimeout(u),c=e,a=r||"",w.readyState=t>0?4:0,i&&(x=z(h,w,i)),t>=200&&300>t||304===t?(h.ifModified&&(_=w.getResponseHeader("Last-Modified"),_&&(ut.lastModified[s]=_),_=w.getResponseHeader("etag"),_&&(ut.etag[s]=_)),204===t?(o=!0,T="nocontent"):304===t?(o=!0,T="notmodified"):(o=D(h,x),T=o.state,p=o.data,v=o.error,o=!v)):(v=T,!t&&T||(T="error",0>t&&(t=0))),w.status=t,w.statusText=(n||T)+"",o?m.resolveWith(f,[p,T,w]):m.rejectWith(f,[w,T,v]),w.statusCode(g),g=e,l&&d.trigger(o?"ajaxSuccess":"ajaxError",[w,h,o?p:v]),y.fireWith(f,[w,T]),l&&(d.trigger("ajaxComplete",[w,h]),--ut.active||ut.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=e),n=n||{};var r,o,s,a,u,l,c,p,h=ut.ajaxSetup({},n),f=h.context||h,d=h.context&&(f.nodeType||f.jquery)?ut(f):ut.event,m=ut.Deferred(),y=ut.Callbacks("once memory"),g=h.statusCode||{},v={},x={},b=0,_="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!p)for(p={};e=Me.exec(a);)p[e[1].toLowerCase()]=e[2];e=p[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return b||(t=x[n]=x[n]||t,v[t]=e),this},overrideMimeType:function(t){return b||(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>b)for(e in t)g[e]=[g[e],t[e]];else w.always(t[w.status]);return this},abort:function(t){var e=t||_;return c&&c.abort(e),i(0,e),this}};if(m.promise(w).complete=y.add,w.success=w.done,w.error=w.fail,h.url=((t||h.url||Ie)+"").replace(De,"").replace(Re,ke[1]+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=ut.trim(h.dataType||"*").toLowerCase().match(ct)||[""],null==h.crossDomain&&(r=Fe.exec(h.url.toLowerCase()),h.crossDomain=!(!r||r[1]===ke[1]&&r[2]===ke[2]&&(r[3]||("http:"===r[1]?80:443))==(ke[3]||("http:"===ke[1]?80:443)))),h.data&&h.processData&&"string"!=typeof h.data&&(h.data=ut.param(h.data,h.traditional)),I(Pe,h,n,w),2===b)return w;l=h.global,l&&0===ut.active++&&ut.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Oe.test(h.type),s=h.url,h.hasContent||(h.data&&(s=h.url+=(ze.test(s)?"&":"?")+h.data,delete h.data),h.cache===!1&&(h.url=He.test(s)?s.replace(He,"$1_="+Ae++):s+(ze.test(s)?"&":"?")+"_="+Ae++)),h.ifModified&&(ut.lastModified[s]&&w.setRequestHeader("If-Modified-Since",ut.lastModified[s]),ut.etag[s]&&w.setRequestHeader("If-None-Match",ut.etag[s])),(h.data&&h.hasContent&&h.contentType!==!1||n.contentType)&&w.setRequestHeader("Content-Type",h.contentType),w.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$e+"; q=0.01":""):h.accepts["*"]);for(o in h.headers)w.setRequestHeader(o,h.headers[o]);if(h.beforeSend&&(h.beforeSend.call(f,w,h)===!1||2===b))return w.abort();_="abort";for(o in{success:1,error:1,complete:1})w[o](h[o]);if(c=I(Be,h,n,w)){w.readyState=1,l&&d.trigger("ajaxSend",[w,h]),h.async&&h.timeout>0&&(u=setTimeout(function(){w.abort("timeout")},h.timeout));try{b=1,c.send(v,i)}catch(T){if(!(2>b))throw T;i(-1,T)}}else i(-1,"No Transport");return w},getScript:function(t,n){return ut.get(t,e,n,"script")},getJSON:function(t,e,n){return ut.get(t,e,n,"json")}}),ut.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return ut.globalEval(t),t}}}),ut.ajaxPrefilter("script",function(t){t.cache===e&&(t.cache=!1),t.crossDomain&&(t.type="GET",t.global=!1)}),ut.ajaxTransport("script",function(t){if(t.crossDomain){var n,i=V.head||ut("head")[0]||V.documentElement;return{send:function(e,r){n=V.createElement("script"),n.async=!0,t.scriptCharset&&(n.charset=t.scriptCharset),n.src=t.url,n.onload=n.onreadystatechange=function(t,e){(e||!n.readyState||/loaded|complete/.test(n.readyState))&&(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),n=null,e||r(200,"success"))},i.insertBefore(n,i.firstChild)},abort:function(){n&&n.onload(e,!0)}}}});var Ue=[],Ye=/(=)\?(?=&|$)|\?\?/;ut.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ue.pop()||ut.expando+"_"+Ae++;return this[t]=!0,t}}),ut.ajaxPrefilter("json jsonp",function(n,i,r){var o,s,a,u=n.jsonp!==!1&&(Ye.test(n.url)?"url":"string"==typeof n.data&&!(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ye.test(n.data)&&"data");return u||"jsonp"===n.dataTypes[0]?(o=n.jsonpCallback=ut.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,u?n[u]=n[u].replace(Ye,"$1"+o):n.jsonp!==!1&&(n.url+=(ze.test(n.url)?"&":"?")+n.jsonp+"="+o),n.converters["script json"]=function(){return a||ut.error(o+" was not called"),a[0]},n.dataTypes[0]="json",s=t[o],t[o]=function(){a=arguments},r.always(function(){t[o]=s,n[o]&&(n.jsonpCallback=i.jsonpCallback,Ue.push(o)),a&&ut.isFunction(s)&&s(a[0]),a=s=e}),"script"):void 0});var Ve,Qe,Ge=0,Je=t.ActiveXObject&&function(){var t;for(t in Ve)Ve[t](e,!0)};ut.ajaxSettings.xhr=t.ActiveXObject?function(){return!this.isLocal&&H()||M()}:H,Qe=ut.ajaxSettings.xhr(),ut.support.cors=!!Qe&&"withCredentials"in Qe,Qe=ut.support.ajax=!!Qe,Qe&&ut.ajaxTransport(function(n){if(!n.crossDomain||ut.support.cors){var i;return{send:function(r,o){var s,a,u=n.xhr();if(n.username?u.open(n.type,n.url,n.async,n.username,n.password):u.open(n.type,n.url,n.async),n.xhrFields)for(a in n.xhrFields)u[a]=n.xhrFields[a];n.mimeType&&u.overrideMimeType&&u.overrideMimeType(n.mimeType),n.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");try{for(a in r)u.setRequestHeader(a,r[a])}catch(l){}u.send(n.hasContent&&n.data||null),i=function(t,r){var a,l,c,p;try{if(i&&(r||4===u.readyState))if(i=e,s&&(u.onreadystatechange=ut.noop,Je&&delete Ve[s]),r)4!==u.readyState&&u.abort();else{p={},a=u.status,l=u.getAllResponseHeaders(),"string"==typeof u.responseText&&(p.text=u.responseText);try{c=u.statusText}catch(h){c=""}a||!n.isLocal||n.crossDomain?1223===a&&(a=204):a=p.text?200:404}}catch(f){r||o(-1,f)}p&&o(a,c,p,l)},n.async?4===u.readyState?setTimeout(i):(s=++Ge,Je&&(Ve||(Ve={},ut(t).unload(Je)),Ve[s]=i),u.onreadystatechange=i):i()},abort:function(){i&&i(e,!0)}}}});var Ke,Ze,tn=/^(?:toggle|show|hide)$/,en=new RegExp("^(?:([+-])=|)("+lt+")([a-z%]*)$","i"),nn=/queueHooks$/,rn=[W],on={"*":[function(t,e){var n,i,r=this.createTween(t,e),o=en.exec(e),s=r.cur(),a=+s||0,u=1,l=20;if(o){if(n=+o[2],i=o[3]||(ut.cssNumber[t]?"":"px"),"px"!==i&&a){a=ut.css(r.elem,t,!0)||n||1;do u=u||".5",a/=u,ut.style(r.elem,t,a+i);while(u!==(u=r.cur()/s)&&1!==u&&--l)}r.unit=i,r.start=a,r.end=o[1]?a+(o[1]+1)*n:n}return r}]};ut.Animation=ut.extend(R,{tweener:function(t,e){ut.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,r=t.length;r>i;i++)n=t[i],on[n]=on[n]||[],on[n].unshift(e)},prefilter:function(t,e){e?rn.unshift(t):rn.push(t)}}),ut.Tween=P,P.prototype={constructor:P,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(ut.cssNumber[n]?"":"px")},cur:function(){var t=P.propHooks[this.prop];return t&&t.get?t.get(this):P.propHooks._default.get(this)},run:function(t){var e,n=P.propHooks[this.prop];return this.options.duration?this.pos=e=ut.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):P.propHooks._default.set(this),
this}},P.prototype.init.prototype=P.prototype,P.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=ut.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){ut.fx.step[t.prop]?ut.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[ut.cssProps[t.prop]]||ut.cssHooks[t.prop])?ut.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},P.propHooks.scrollTop=P.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ut.each(["toggle","show","hide"],function(t,e){var n=ut.fn[e];ut.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(B(e,!0),t,i,r)}}),ut.fn.extend({fadeTo:function(t,e,n,i){return this.filter(w).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=ut.isEmptyObject(t),o=ut.speed(e,n,i),s=function(){var e=R(this,ut.extend({},t),o);s.finish=function(){e.stop(!0)},(r||ut._data(this,"finish"))&&e.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(t,n,i){var r=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=n,n=t,t=e),n&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,n=null!=t&&t+"queueHooks",o=ut.timers,s=ut._data(this);if(n)s[n]&&s[n].stop&&r(s[n]);else for(n in s)s[n]&&s[n].stop&&nn.test(n)&&r(s[n]);for(n=o.length;n--;)o[n].elem!==this||null!=t&&o[n].queue!==t||(o[n].anim.stop(i),e=!1,o.splice(n,1));!e&&i||ut.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=ut._data(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=ut.timers,s=i?i.length:0;for(n.finish=!0,ut.queue(this,t,[]),r&&r.cur&&r.cur.finish&&r.cur.finish.call(this),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;s>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),ut.each({slideDown:B("show"),slideUp:B("hide"),slideToggle:B("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ut.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),ut.speed=function(t,e,n){var i=t&&"object"==typeof t?ut.extend({},t):{complete:n||!n&&e||ut.isFunction(t)&&t,duration:t,easing:n&&e||e&&!ut.isFunction(e)&&e};return i.duration=ut.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in ut.fx.speeds?ut.fx.speeds[i.duration]:ut.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){ut.isFunction(i.old)&&i.old.call(this),i.queue&&ut.dequeue(this,i.queue)},i},ut.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},ut.timers=[],ut.fx=P.prototype.init,ut.fx.tick=function(){var t,n=ut.timers,i=0;for(Ke=ut.now();i<n.length;i++)t=n[i],t()||n[i]!==t||n.splice(i--,1);n.length||ut.fx.stop(),Ke=e},ut.fx.timer=function(t){t()&&ut.timers.push(t)&&ut.fx.start()},ut.fx.interval=13,ut.fx.start=function(){Ze||(Ze=setInterval(ut.fx.tick,ut.fx.interval))},ut.fx.stop=function(){clearInterval(Ze),Ze=null},ut.fx.speeds={slow:600,fast:200,_default:400},ut.fx.step={},ut.expr&&ut.expr.filters&&(ut.expr.filters.animated=function(t){return ut.grep(ut.timers,function(e){return t===e.elem}).length}),ut.fn.offset=function(t){if(arguments.length)return t===e?this:this.each(function(e){ut.offset.setOffset(this,t,e)});var n,i,r={top:0,left:0},o=this[0],s=o&&o.ownerDocument;if(s)return n=s.documentElement,ut.contains(n,o)?(typeof o.getBoundingClientRect!==Y&&(r=o.getBoundingClientRect()),i=$(s),{top:r.top+(i.pageYOffset||n.scrollTop)-(n.clientTop||0),left:r.left+(i.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}):r},ut.offset={setOffset:function(t,e,n){var i=ut.css(t,"position");"static"===i&&(t.style.position="relative");var r,o,s=ut(t),a=s.offset(),u=ut.css(t,"top"),l=ut.css(t,"left"),c=("absolute"===i||"fixed"===i)&&ut.inArray("auto",[u,l])>-1,p={},h={};c?(h=s.position(),r=h.top,o=h.left):(r=parseFloat(u)||0,o=parseFloat(l)||0),ut.isFunction(e)&&(e=e.call(t,n,a)),null!=e.top&&(p.top=e.top-a.top+r),null!=e.left&&(p.left=e.left-a.left+o),"using"in e?e.using.call(t,p):s.css(p)}},ut.fn.extend({position:function(){if(this[0]){var t,e,n={top:0,left:0},i=this[0];return"fixed"===ut.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),ut.nodeName(t[0],"html")||(n=t.offset()),n.top+=ut.css(t[0],"borderTopWidth",!0),n.left+=ut.css(t[0],"borderLeftWidth",!0)),{top:e.top-n.top-ut.css(i,"marginTop",!0),left:e.left-n.left-ut.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||V.documentElement;t&&!ut.nodeName(t,"html")&&"static"===ut.css(t,"position");)t=t.offsetParent;return t||V.documentElement})}}),ut.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var i=/Y/.test(n);ut.fn[t]=function(r){return ut.access(this,function(t,r,o){var s=$(t);return o===e?s?n in s?s[n]:s.document.documentElement[r]:t[r]:void(s?s.scrollTo(i?ut(s).scrollLeft():o,i?o:ut(s).scrollTop()):t[r]=o)},t,r,arguments.length,null)}}),ut.each({Height:"height",Width:"width"},function(t,n){ut.each({padding:"inner"+t,content:n,"":"outer"+t},function(i,r){ut.fn[r]=function(r,o){var s=arguments.length&&(i||"boolean"!=typeof r),a=i||(r===!0||o===!0?"margin":"border");return ut.access(this,function(n,i,r){var o;return ut.isWindow(n)?n.document.documentElement["client"+t]:9===n.nodeType?(o=n.documentElement,Math.max(n.body["scroll"+t],o["scroll"+t],n.body["offset"+t],o["offset"+t],o["client"+t])):r===e?ut.css(n,i,a):ut.style(n,i,r,a)},n,s?r:e,s,null)}})}),t.jQuery=t.$=ut,"function"==typeof define&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return ut})}(window),function(t){"use strict";var e=t.jCarousel={};e.version="0.3.4";var n=/^([+\-]=)?(.+)$/;e.parseTarget=function(t){var e=!1,i="object"!=typeof t?n.exec(t):null;return i?(t=parseInt(i[2],10)||0,i[1]&&(e=!0,"-="===i[1]&&(t*=-1))):"object"!=typeof t&&(t=parseInt(t,10)||0),{target:t,relative:e}},e.detectCarousel=function(t){for(var e;t.length>0;){if(e=t.filter("[data-jcarousel]"),e.length>0)return e;if(e=t.find("[data-jcarousel]"),e.length>0)return e;t=t.parent()}return null},e.base=function(n){return{version:e.version,_options:{},_element:null,_carousel:null,_init:t.noop,_create:t.noop,_destroy:t.noop,_reload:t.noop,create:function(){return this._element.attr("data-"+n.toLowerCase(),!0).data(n,this),!1===this._trigger("create")?this:(this._create(),this._trigger("createend"),this)},destroy:function(){return!1===this._trigger("destroy")?this:(this._destroy(),this._trigger("destroyend"),this._element.removeData(n).removeAttr("data-"+n.toLowerCase()),this)},reload:function(t){return!1===this._trigger("reload")?this:(t&&this.options(t),this._reload(),this._trigger("reloadend"),this)},element:function(){return this._element},options:function(e,n){if(0===arguments.length)return t.extend({},this._options);if("string"==typeof e){if("undefined"==typeof n)return"undefined"==typeof this._options[e]?null:this._options[e];this._options[e]=n}else this._options=t.extend({},this._options,e);return this},carousel:function(){return this._carousel||(this._carousel=e.detectCarousel(this.options("carousel")||this._element),this._carousel||t.error('Could not detect carousel for plugin "'+n+'"')),this._carousel},_trigger:function(e,i,r){var o,s=!1;return r=[this].concat(r||[]),(i||this._element).each(function(){o=t.Event((n+":"+e).toLowerCase()),t(this).trigger(o,r),o.isDefaultPrevented()&&(s=!0)}),!s}}},e.plugin=function(n,i){var r=t[n]=function(e,n){this._element=t(e),this.options(n),this._init(),this.create()};return r.fn=r.prototype=t.extend({},e.base(n),i),t.fn[n]=function(e){var i=Array.prototype.slice.call(arguments,1),o=this;return"string"==typeof e?this.each(function(){var r=t(this).data(n);if(!r)return t.error("Cannot call methods on "+n+' prior to initialization; attempted to call method "'+e+'"');if(!t.isFunction(r[e])||"_"===e.charAt(0))return t.error('No such method "'+e+'" for '+n+" instance");var s=r[e].apply(r,i);return s!==r&&"undefined"!=typeof s?(o=s,!1):void 0}):this.each(function(){var i=t(this).data(n);i instanceof r?i.reload(e):new r(this,e)}),o},r}}(jQuery),function(t,e){"use strict";var n=function(t){return parseFloat(t)||0};t.jCarousel.plugin("jcarousel",{animating:!1,tail:0,inTail:!1,resizeTimer:null,lt:null,vertical:!1,rtl:!1,circular:!1,underflow:!1,relative:!1,_options:{list:function(){return this.element().children().eq(0)},items:function(){return this.list().children()},animation:400,transitions:!1,wrap:null,vertical:null,rtl:null,center:!1},_list:null,_items:null,_target:t(),_first:t(),_last:t(),_visible:t(),_fullyvisible:t(),_init:function(){var t=this;return this.onWindowResize=function(){t.resizeTimer&&clearTimeout(t.resizeTimer),t.resizeTimer=setTimeout(function(){t.reload()},100)},this},_create:function(){this._reload(),t(e).on("resize.jcarousel",this.onWindowResize)},_destroy:function(){t(e).off("resize.jcarousel",this.onWindowResize)},_reload:function(){this.vertical=this.options("vertical"),null==this.vertical&&(this.vertical=this.list().height()>this.list().width()),this.rtl=this.options("rtl"),null==this.rtl&&(this.rtl=function(e){if("rtl"===(""+e.attr("dir")).toLowerCase())return!0;var n=!1;return e.parents("[dir]").each(function(){return/rtl/i.test(t(this).attr("dir"))?(n=!0,!1):void 0}),n}(this._element)),this.lt=this.vertical?"top":"left",this.relative="relative"===this.list().css("position"),this._list=null,this._items=null;var e=this.index(this._target)>=0?this._target:this.closest();this.circular="circular"===this.options("wrap"),this.underflow=!1;var n={left:0,top:0};return e.length>0&&(this._prepare(e),this.list().find("[data-jcarousel-clone]").remove(),this._items=null,this.underflow=this._fullyvisible.length>=this.items().length,this.circular=this.circular&&!this.underflow,n[this.lt]=this._position(e)+"px"),this.move(n),this},list:function(){if(null===this._list){var e=this.options("list");this._list=t.isFunction(e)?e.call(this):this._element.find(e)}return this._list},items:function(){if(null===this._items){var e=this.options("items");this._items=(t.isFunction(e)?e.call(this):this.list().find(e)).not("[data-jcarousel-clone]")}return this._items},index:function(t){return this.items().index(t)},closest:function(){var e,i=this,r=this.list().position()[this.lt],o=t(),s=!1,a=this.vertical?"bottom":this.rtl&&!this.relative?"left":"right";return this.rtl&&this.relative&&!this.vertical&&(r+=this.list().width()-this.clipping()),this.items().each(function(){if(o=t(this),s)return!1;var u=i.dimension(o);if(r+=u,r>=0){if(e=u-n(o.css("margin-"+a)),!(Math.abs(r)-u+e/2<=0))return!1;s=!0}}),o},target:function(){return this._target},first:function(){return this._first},last:function(){return this._last},visible:function(){return this._visible},fullyvisible:function(){return this._fullyvisible},hasNext:function(){if(!1===this._trigger("hasnext"))return!0;var t=this.options("wrap"),e=this.items().length-1,n=this.options("center")?this._target:this._last;return!!(e>=0&&!this.underflow&&(t&&"first"!==t||this.index(n)<e||this.tail&&!this.inTail))},hasPrev:function(){if(!1===this._trigger("hasprev"))return!0;var t=this.options("wrap");return!!(this.items().length>0&&!this.underflow&&(t&&"last"!==t||this.index(this._first)>0||this.tail&&this.inTail))},clipping:function(){return this._element["inner"+(this.vertical?"Height":"Width")]()},dimension:function(t){return t["outer"+(this.vertical?"Height":"Width")](!0)},scroll:function(e,n,i){if(this.animating)return this;if(!1===this._trigger("scroll",null,[e,n]))return this;t.isFunction(n)&&(i=n,n=!0);var r=t.jCarousel.parseTarget(e);if(r.relative){var o,s,a,u,l,c,p,h,f=this.items().length-1,d=Math.abs(r.target),m=this.options("wrap");if(r.target>0){var y=this.index(this._last);if(y>=f&&this.tail)this.inTail?"both"===m||"last"===m?this._scroll(0,n,i):t.isFunction(i)&&i.call(this,!1):this._scrollTail(n,i);else if(o=this.index(this._target),this.underflow&&o===f&&("circular"===m||"both"===m||"last"===m)||!this.underflow&&y===f&&("both"===m||"last"===m))this._scroll(0,n,i);else if(a=o+d,this.circular&&a>f){for(h=f,l=this.items().get(-1);h++<a;)l=this.items().eq(0),c=this._visible.index(l)>=0,c&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(l),c||(p={},p[this.lt]=this.dimension(l),this.moveBy(p)),this._items=null;this._scroll(l,n,i)}else this._scroll(Math.min(a,f),n,i)}else if(this.inTail)this._scroll(Math.max(this.index(this._first)-d+1,0),n,i);else if(s=this.index(this._first),o=this.index(this._target),u=this.underflow?o:s,a=u-d,0>=u&&(this.underflow&&"circular"===m||"both"===m||"first"===m))this._scroll(f,n,i);else if(this.circular&&0>a){for(h=a,l=this.items().get(0);h++<0;){l=this.items().eq(-1),c=this._visible.index(l)>=0,c&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().prepend(l),this._items=null;var g=this.dimension(l);p={},p[this.lt]=-g,this.moveBy(p)}this._scroll(l,n,i)}else this._scroll(Math.max(a,0),n,i)}else this._scroll(r.target,n,i);return this._trigger("scrollend"),this},moveBy:function(t,e){var i=this.list().position(),r=1,o=0;return this.rtl&&!this.vertical&&(r=-1,this.relative&&(o=this.list().width()-this.clipping())),t.left&&(t.left=i.left+o+n(t.left)*r+"px"),t.top&&(t.top=i.top+o+n(t.top)*r+"px"),this.move(t,e)},move:function(e,n){n=n||{};var i=this.options("transitions"),r=!!i,o=!!i.transforms,s=!!i.transforms3d,a=n.duration||0,u=this.list();if(!r&&a>0)return void u.animate(e,n);var l=n.complete||t.noop,c={};if(r){var p={transitionDuration:u.css("transitionDuration"),transitionTimingFunction:u.css("transitionTimingFunction"),transitionProperty:u.css("transitionProperty")},h=l;l=function(){t(this).css(p),h.call(this)},c={transitionDuration:(a>0?a/1e3:0)+"s",transitionTimingFunction:i.easing||n.easing,transitionProperty:a>0?function(){return o||s?"all":e.left?"left":"top"}():"none",transform:"none"}}s?c.transform="translate3d("+(e.left||0)+","+(e.top||0)+",0)":o?c.transform="translate("+(e.left||0)+","+(e.top||0)+")":t.extend(c,e),r&&a>0&&u.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",l),u.css(c),0>=a&&u.each(function(){l.call(this)})},_scroll:function(e,n,i){if(this.animating)return t.isFunction(i)&&i.call(this,!1),this;if("object"!=typeof e?e=this.items().eq(e):"undefined"==typeof e.jquery&&(e=t(e)),0===e.length)return t.isFunction(i)&&i.call(this,!1),this;this.inTail=!1,this._prepare(e);var r=this._position(e),o=this.list().position()[this.lt];if(r===o)return t.isFunction(i)&&i.call(this,!1),this;var s={};return s[this.lt]=r+"px",this._animate(s,n,i),this},_scrollTail:function(e,n){if(this.animating||!this.tail)return t.isFunction(n)&&n.call(this,!1),this;var i=this.list().position()[this.lt];this.rtl&&this.relative&&!this.vertical&&(i+=this.list().width()-this.clipping()),this.rtl&&!this.vertical?i+=this.tail:i-=this.tail,this.inTail=!0;var r={};return r[this.lt]=i+"px",this._update({target:this._target.next(),fullyvisible:this._fullyvisible.slice(1).add(this._visible.last())}),this._animate(r,e,n),this},_animate:function(e,n,i){if(i=i||t.noop,!1===this._trigger("animate"))return i.call(this,!1),this;this.animating=!0;var r=this.options("animation"),o=t.proxy(function(){this.animating=!1;var t=this.list().find("[data-jcarousel-clone]");t.length>0&&(t.remove(),this._reload()),this._trigger("animateend"),i.call(this,!0)},this),s="object"==typeof r?t.extend({},r):{duration:r},a=s.complete||t.noop;return n===!1?s.duration=0:"undefined"!=typeof t.fx.speeds[s.duration]&&(s.duration=t.fx.speeds[s.duration]),s.complete=function(){o(),a.call(this)},this.move(e,s),this},_prepare:function(e){var i,r,o,s,a=this.index(e),u=a,l=this.dimension(e),c=this.clipping(),p=this.vertical?"bottom":this.rtl?"left":"right",h=this.options("center"),f={target:e,first:e,last:e,visible:e,fullyvisible:c>=l?e:t()};if(h&&(l/=2,c/=2),c>l)for(;;){if(i=this.items().eq(++u),0===i.length){if(!this.circular)break;if(i=this.items().eq(0),e.get(0)===i.get(0))break;if(r=this._visible.index(i)>=0,r&&i.after(i.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(i),!r){var d={};d[this.lt]=this.dimension(i),this.moveBy(d)}this._items=null}if(s=this.dimension(i),0===s)break;if(l+=s,f.last=i,f.visible=f.visible.add(i),o=n(i.css("margin-"+p)),c>=l-o&&(f.fullyvisible=f.fullyvisible.add(i)),l>=c)break}if(!this.circular&&!h&&c>l)for(u=a;;){if(--u<0)break;if(i=this.items().eq(u),0===i.length)break;if(s=this.dimension(i),0===s)break;if(l+=s,f.first=i,f.visible=f.visible.add(i),o=n(i.css("margin-"+p)),c>=l-o&&(f.fullyvisible=f.fullyvisible.add(i)),l>=c)break}return this._update(f),this.tail=0,h||"circular"===this.options("wrap")||"custom"===this.options("wrap")||this.index(f.last)!==this.items().length-1||(l-=n(f.last.css("margin-"+p)),l>c&&(this.tail=l-c)),this},_position:function(t){var e=this._first,n=e.position()[this.lt],i=this.options("center"),r=i?this.clipping()/2-this.dimension(e)/2:0;return this.rtl&&!this.vertical?(n-=this.relative?this.list().width()-this.dimension(e):this.clipping()-this.dimension(e),n+=r):n-=r,!i&&(this.index(t)>this.index(e)||this.inTail)&&this.tail?(n=this.rtl&&!this.vertical?n-this.tail:n+this.tail,this.inTail=!0):this.inTail=!1,-n},_update:function(e){var n,i=this,r={target:this._target,first:this._first,last:this._last,visible:this._visible,fullyvisible:this._fullyvisible},o=this.index(e.first||r.first)<this.index(r.first),s=function(n){var s=[],a=[];e[n].each(function(){r[n].index(this)<0&&s.push(this)}),r[n].each(function(){e[n].index(this)<0&&a.push(this)}),o?s=s.reverse():a=a.reverse(),i._trigger(n+"in",t(s)),i._trigger(n+"out",t(a)),i["_"+n]=e[n]};for(n in e)s(n);return this}})}(jQuery,window),function(t){"use strict";t.jcarousel.fn.scrollIntoView=function(e,n,i){var r,o=t.jCarousel.parseTarget(e),s=this.index(this._fullyvisible.first()),a=this.index(this._fullyvisible.last());if(r=o.relative?o.target<0?Math.max(0,s+o.target):a+o.target:"object"!=typeof o.target?o.target:this.index(o.target),s>r)return this.scroll(r,n,i);if(r>=s&&a>=r)return t.isFunction(i)&&i.call(this,!1),this;for(var u,l=this.items(),c=this.clipping(),p=this.vertical?"bottom":this.rtl?"left":"right",h=0;;){if(u=l.eq(r),0===u.length)break;if(h+=this.dimension(u),h>=c){var f=parseFloat(u.css("margin-"+p))||0;h-f!==c&&r++;break}if(0>=r)break;r--}return this.scroll(r,n,i)}}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselControl",{_options:{target:"+=1",event:"click",method:"scroll"},_active:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onEvent=t.proxy(function(e){e.preventDefault();var n=this.options("method");t.isFunction(n)?n.call(this):this.carousel().jcarousel(this.options("method"),this.options("target"))},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend jcarousel:scrollend",this.onReload),this._element.on(this.options("event")+".jcarouselcontrol",this.onEvent),this._reload()},_destroy:function(){this._element.off(".jcarouselcontrol",this.onEvent),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend jcarousel:scrollend",this.onReload)},_reload:function(){var e,n=t.jCarousel.parseTarget(this.options("target")),i=this.carousel();if(n.relative)e=i.jcarousel(n.target>0?"hasNext":"hasPrev");else{var r="object"!=typeof n.target?i.jcarousel("items").eq(n.target):n.target;e=i.jcarousel("target").index(r)>=0}return this._active!==e&&(this._trigger(e?"active":"inactive"),this._active=e),this}})}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselPagination",{_options:{perPage:null,item:function(t){return'<a href="#'+t+'">'+t+"</a>"},event:"click",method:"scroll"},_carouselItems:null,_pages:{},_items:{},_currentPage:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onScroll=t.proxy(this._update,this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend",this.onReload).on("jcarousel:scrollend",this.onScroll),this._reload()},_destroy:function(){this._clear(),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend",this.onReload).off("jcarousel:scrollend",this.onScroll),this._carouselItems=null},_reload:function(){var e=this.options("perPage");if(this._pages={},this._items={},t.isFunction(e)&&(e=e.call(this)),null==e)this._pages=this._calculatePages();else for(var n,i=parseInt(e,10)||0,r=this._getCarouselItems(),o=1,s=0;;){if(n=r.eq(s++),0===n.length)break;this._pages[o]?this._pages[o]=this._pages[o].add(n):this._pages[o]=n,s%i===0&&o++}this._clear();var a=this,u=this.carousel().data("jcarousel"),l=this._element,c=this.options("item"),p=this._getCarouselItems().length;t.each(this._pages,function(e,n){var i=a._items[e]=t(c.call(a,e,n));i.on(a.options("event")+".jcarouselpagination",t.proxy(function(){var t=n.eq(0);if(u.circular){var i=u.index(u.target()),r=u.index(t);parseFloat(e)>parseFloat(a._currentPage)?i>r&&(t="+="+(p-i+r)):r>i&&(t="-="+(i+(p-r)))}u[this.options("method")](t)},a)),l.append(i)}),this._update()},_update:function(){var e,n=this.carousel().jcarousel("target");t.each(this._pages,function(t,i){return i.each(function(){return n.is(this)?(e=t,!1):void 0}),e?!1:void 0}),this._currentPage!==e&&(this._trigger("inactive",this._items[this._currentPage]),this._trigger("active",this._items[e])),this._currentPage=e},items:function(){return this._items},reloadCarouselItems:function(){return this._carouselItems=null,this},_clear:function(){this._element.empty(),this._currentPage=null},_calculatePages:function(){for(var t,e,n=this.carousel().data("jcarousel"),i=this._getCarouselItems(),r=n.clipping(),o=0,s=0,a=1,u={};;){if(t=i.eq(s++),0===t.length)break;e=n.dimension(t),o+e>r&&(a++,o=0),o+=e,u[a]?u[a]=u[a].add(t):u[a]=t}return u},_getCarouselItems:function(){return this._carouselItems||(this._carouselItems=this.carousel().jcarousel("items")),this._carouselItems}})}(jQuery),function(t,e){"use strict";var n,i,r={hidden:"visibilitychange",mozHidden:"mozvisibilitychange",msHidden:"msvisibilitychange",webkitHidden:"webkitvisibilitychange"};t.each(r,function(t,r){return"undefined"!=typeof e[t]?(n=t,i=r,!1):void 0}),t.jCarousel.plugin("jcarouselAutoscroll",{_options:{target:"+=1",interval:3e3,autostart:!0},_timer:null,_started:!1,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onAnimateEnd=t.proxy(this._start,this),this.onVisibilityChange=t.proxy(function(){e[n]?this._stop():this._start()},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy),t(e).on(i,this.onVisibilityChange),this.options("autostart")&&this.start()},_destroy:function(){this._stop(),this.carousel().off("jcarousel:destroy",this.onDestroy),t(e).off(i,this.onVisibilityChange)},_start:function(){return this._stop(),this._started?(this.carousel().one("jcarousel:animateend",this.onAnimateEnd),this._timer=setTimeout(t.proxy(function(){this.carousel().jcarousel("scroll",this.options("target"))},this),this.options("interval")),this):void 0},_stop:function(){return this._timer&&(this._timer=clearTimeout(this._timer)),this.carousel().off("jcarousel:animateend",this.onAnimateEnd),this},start:function(){return this._started=!0,this._start(),this},stop:function(){return this._started=!1,this._stop(),this}})}(jQuery,document),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){if(t.support.cors||!t.ajaxTransport||!window.XDomainRequest)return t;var e=/^(https?:)?\/\//i,n=/^get|post$/i,i=new RegExp("^(//|"+location.protocol+")","i");return t.ajaxTransport("* text html xml json",function(r,o,s){if(r.crossDomain&&r.async&&n.test(r.type)&&e.test(r.url)&&i.test(r.url)){var a=null;return{send:function(e,n){var i="",s=(o.dataType||"").toLowerCase();a=new XDomainRequest,/^\d+$/.test(o.timeout)&&(a.timeout=o.timeout),a.ontimeout=function(){n(500,"timeout")},a.onload=function(){var e="Content-Length: "+a.responseText.length+"\r\nContent-Type: "+a.contentType,i={code:200,message:"success"},r={text:a.responseText};try{if("html"===s||/text\/html/i.test(a.contentType))r.html=a.responseText;else if("json"===s||"text"!==s&&/\/json/i.test(a.contentType))try{r.json=t.parseJSON(a.responseText)}catch(o){i.code=500,i.message="parseerror"}else if("xml"===s||"text"!==s&&/\/xml/i.test(a.contentType)){var u=new ActiveXObject("Microsoft.XMLDOM");u.async=!1;try{u.loadXML(a.responseText)}catch(o){u=void 0}if(!u||!u.documentElement||u.getElementsByTagName("parsererror").length)throw i.code=500,i.message="parseerror","Invalid XML: "+a.responseText;r.xml=u}}catch(l){throw l}finally{n(i.code,i.message,r,e)}},a.onprogress=function(){},a.onerror=function(){n(500,"error",{text:a.responseText})},o.data&&(i="string"===t.type(o.data)?o.data:t.param(o.data)),a.open(r.type,r.url),a.send(i)},abort:function(){a&&a.abort()}}}}),t});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
